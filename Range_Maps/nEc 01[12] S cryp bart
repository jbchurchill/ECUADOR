%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Elizabeth M Clark) (Elizabeth Clark Design)%%Title: (nEc 01[12] S cryp bart)%%CreationDate: (10/10/04) (8:41 PM)%%BoundingBox: 253 331 388 449%%HiResBoundingBox: 253.5552 331.6084 387.0059 448.4556%%DocumentProcessColors: Black%%DocumentFonts: Helvetica%%+ Helvetica-Oblique%%+ Sabon-Roman%%DocumentNeededFonts: Helvetica%%+ Helvetica-Oblique%%+ Sabon-Roman%%DocumentFiles:BOE:Birds of Ecuador map files:0 ec work:basemap4link.eps%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Black&White%AI3_IncludePlacedImages%AI7_ImageSettings: 1%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 33 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 1296 1296%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 10.5 595.5 1 625 432 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 33%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -33 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI7_Thumbnail: 128 112 8%%BeginData: 10000 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD26FFA852A8FD7CFFA852FF527DFD7AFFA827FFFFFF52FD79FFA8%7DFD05FF27A8FD76FFA8A8FD07FFA8A8FD74FF7DFD0AFF7D7D7DFD26FF52%52A8FD04FF7DFF7DFFFFA8A8A8FF7DFFFFFFA8527D7DFF7DFD2DFFA87D52%7D7DFD0CFF527DFD26FF52A87D7D7DFF7DF8A87DFF7D7D7D27FF7DA852A8%FFA87DFFFF7D527D7D7DA87D7D7D52FF7D7DA87DA8A8FD19FFA8527D27A8%FD10FFA8FF7D27FD24FF527D275252FF7D52FF52FF277D7D7DFFFF7D7D7D%FF7DA8FFFF527D7D7D52A852FF527DFF7DFF7D52A87DFD18FF7DFD15FF52%FFFFA852A8FD22FF277D7D7D52FF7D7DA87DFF7D7D7D52FFFFA8527DFFA8%7DFFFF7D7DA8F87D7D7DFF7D7DFF7D7D7D5252A8FD16FF7D27FD16FFA8FF%FF52FF7D7DFD5DFFA852A8527DFD17FF52FFFFA8A8FFA8A8FD5BFF52FD1D%FFA8A852F8FFFFFF7D277D527D27A8FD18FF5252A8FD07FFA8FD08FFA8A8%A8FD06FFA8A8FD06FF7DA8A8FFFFA8A8A8FD10FF7D7DFD1BFF7D27FF7D7D%52FD08FF27A8FD16FF7DFFFFA87D7DFF7D527DFF52A8A87D7D7DA87DA87D%7D7DFF7DA87DA8FF7D7D7DA8FD047D527DA87DA852FF52FD11FFA827FD19%FF7DFF7DFFFFFFA8A8FD08FFF8FD16FF7DFFFF7DA8527D52FF52FF52A8A8%7D52FF52A87D7D527DA87D7D7DA8FF52FF52A87D7D52A87D7D52A87D7D7D%A8FD12FF7DFD18FFA87DFF52FD04FF27FD07FF7DA852FD15FF527D7D7DFF%FD057DFF5252A8527DFF527DFF527D527DA87D7DFFFF527DA8527D7D7D52%A87D5252FF527DA8FD12FF52FD18FF52FFA8FD06FF7DFD05FFA8A8FFFF52%FD18FFA852FF52FD36FF52FD19FF7DFF7DFD06FFA8FD05FF27FFFFFFA87D%FD51FF7DA8FD14FFA87DA8A827A8FD08FF7DFFFFFFA8FD05FF52FD25FFA8%A8FF52FF52FFA87D52FD22FF52FF52FD0CFF527D7DA852A852FF7D7D52FD%0BFF7D7D7D52FD04FF7D52FD25FF52A8FF7DA87DFFA8FF7DFD23FF277D27%7D27FD07FFA8527D52A852A8FFFFFFA8A8FD0EFF52A8FD04FF27FF527D27%7D52A8FD0AFFA8277D27A8FD10FFA87DFF52FF52FFA87D7DFD22FF52FD0C%FFA87DFD04FF527DFF7D527DFFFF7D7DFD0AFF7DFD04FF7DFD07FF7DA852%FD08FF27FFFFFF7D7DA8FD0EFF7DA8FF7DFF7DFF7D527DFD22FF7DFD04FF%A87DA8FFA8A852A8A8FD07FFA852FFA8A852A8FF7DA8FD07FFA8A8FD04FF%7DFD0AFF527D52527DA8FFFF7DFD05FFA852FD10FF27FD28FF52FD06FF7D%527DFFFFFF7D7DFD07FF7D7DFD06FFA852FFFFFF525227FD06FF52FD0FFF%A8522727FD07FF52FD37FF27A8FD08FF52FD0CFFA87DFD07FFA8A87DA8FF%FF52A8FD04FFA8A8FD1AFFA8A8FD35FF7DA8FD09FFA8FD0CFF7DFD04FFA8%FD0AFF7DFD04FFA8FD1CFF7DFD35FF27FD0AFF52FD0BFF7DFD04FFA87DFD%09FF52A8FD04FF52FD1CFFA87D527D52FD30FF277DFD0AFFA8FD0AFFA87D%FFFFFF7DF85227FD07FF52A8FD05FF7DFD21FF52A8FD2CFF5252A8FD0BFF%A8A8FD09FF52FD05FFF85252FD07FFA8FF7DFD04FF52FD0DFFA8FFA8A8A8%F3A8F3A8F3A8A8A8FFA8FD06FFA827A8FD29FF52A8FD0EFF527D52FD06FF%52FD0DFFA87D52FFFF527D7DA87D277D277DFF27FD07FFA8FD10F3FD07FF%7DA852A8A8FD25FFA8FD11FFA8A8FD05FF7DFD0DFF7DFD09FF52FFFF7D27%A8FF27A8A852A8A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8%52527D527DFD26FF7DFD13FF27FD05FF52FD0DFF52FD09FF7DFD04FF7D7D%FF7DA8F37D7DFD16F3A8FD2AFF52FD13FFA8FD05FF7DFD0DFF7DFD09FF27%FD05FFA8A8A8F3A8F3A852A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8%F3A8F3A8FD29FF27FD12FF52FD05FFA8A8FD0DFF7DFD08FF52FD06FFF352%FD06F3A8FD15F3FD2AFFA8FD12FFA8FD05FF52A8A87DFD0AFFA87DFD08FF%7DFD04FFA8F352F3A8F3A8F3A8F3A852A8F3A8F3A8F3A8F3A8F3A8F3A8F3%A8F3A8F3A8F3A8FD2AFF52FD11FF7D52A8FFFFA852FFFFFFA87DFD07FFA8%FD09FF527DFFA827FFF37DF3F3F3A8527D527DA8527D277DF3F3F37D527D%52F3F37DA8FD06F3A8A8FD28FF277DFD10FFA87DFF52FFA8F8FD05FFFD05%7DFFFFFF27FD09FF7D7DA8FFA87D7DF3A8F37D52A8F3A8F3A8F3A8F3A87D%5227A8F3A8F3F8A87DF3277D52F327A8A852A8FD27FF27FD10FFA852FFFF%7DFF52A8FD0AFF27A8A8FD0AFF52FF52FFFD05F37DFD13F35252FD07F3A8%A8FD27FF7DFD11FF7DFD04FF27FF52FD0BFF7DFD0AFF52FFFFFF52A8F3A8%F3A852A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A82752A8A8F3A8%F37D7D27FD26FF52FD10FF52A8FD05FF52FD0CFF7DFD0AFF7DFFFFA8A8FD%05F37DFD17F3A852A8F3F3F3A852A8FD24FF7D7DFD0FFF52A852A8FD04FF%A87DFD0BFF7DFD07FFA8527DFFFFFFF8F3A8F3A8522752A8F3A8F3A8F3A8%F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A87D27F3A8F37DFD20FF52A852%7D52FD10FF52FFFFA8FFFFA87DFFFF7DFD0AFF52FD07FF7DA8FD04FFA8FD%04F3FF7D27FD1BF3A852F3F352A8FD1EFF7D27FD14FFA8FFFF52FFFF7DFF%FFFF52FD0AFF7DFD06FF52FD05FFA87DA8F37D7DF87D27F3A8F3A8F3A8F3%A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A87DA8F3A852A8FD1DFF%7DA8FD13FF7DFFFFFFA8FFFFA8FFFFFF7DFD0AFF52FD06FF7DFD06FF5252%7D2752F3F3A87D52A8FD1AF327A85252FD1EFF277DFD12FF7D7DFFFFA87D%FFFFA852FFFF27FD0AFFF87DFD05FF7DFD05FFA8F3A852A8F3A8F3A8F3A8%52A8F3A8F3A8FFA8FFA8FFA8F3A8F3A8F3A8F3A8F3A8F3A8F3A8F3A852A8%FD20FF52FD11FFA8FFFFFFA852FD04FFA8FFFFFFA8FD07FF527DFD09FF52%7D5252527D52FD08F352F3A8FD0BFFA8FD0CF352F3FD22FF52FD0DFFA852%7DFD04FF7DFD05FF7D52A8527DFFFF52277D7D7DFFFFFF52FD07FFA8FFFF%FFA87DA8F3A8F3A8F3A87D7D52A8FFFFFFA8A852FD07FFA8A8A8F3A8F3A8%F3A8F3A8F37DFD23FFA8A8FD0AFFA87DFD06FF52A8FD05FF7DFFFFFF5252%52A8FD07FFA852A8A8FFFFA8FD05FF52A852A827A852A852FFFFA8A852A8%52A8FFFF27FD09FFFD09F352FD24FF7DFD0AFF7DFD06FF52FD07FF7DFFFF%FF7D27FD0AFF7D277D7D7DF87D277D7D7DA8FFA8FFA8FFA8FD0DFF52A8FD%08FFA8F3A8F3A8F3A8F3A8FD24FF52FD11FFA8FD07FF7DFFFFFF52FD0DFF%52FD1EFFA8A87DA8A8A87DFD04FFFD05F3FD25FF7DFD0AFF7DFD05FF7DFD%0BFF7DA852A8FD0AFF7D7DFFFFFF52FD20FF7DA87DFFFFFFA8F3A8F3A8FD%23FF52FD0BFFA8FD05FFA8FD0BFF7DFFFF527DA87DFD06FF527D527DFFFF%7DFD22FF7D527DFFFFA8F3A8FD23FF27FD0CFF7DFD05FF7DFD0BFF27FFFF%A87DFF7DA8F8A852A827FFFFFF7DA8FD10FF527DFD15FFA87DFFA87DFD23%FF27FD0BFFA8A8FD11FFA8FFFFFFA8FD0CFFA87DFD0EFFA8FF7DFD16FFA8%A8FF52FD23FFA827FD047DFD06FF27FD05FF52FD0CFF52FFFFFF7DFD06FF%7D7DFD05FF52FD0FFF52FD18FF7D52A8FD24FF7DFFFFFFA852A8FFFFA8A8%A8FD06FFA8FD0BFF7DFFFF52A8FD06FFA8FD06FFF8FD0FFFA8FD19FF7DFD%25FF27FD06FF7D7D7DFD08FFA87DFD09FF7DFFFFFFA8FD07FF7DFD05FFA8%7D52FD27FF7DFD27FF52FD11FF27FD09FF52FFA8A8A8FD07FFA8FD05FF52%FFFF52FD25FFA8FD28FF52FD11FFA827FD08FF52A8FD0AFFA8FD04FF7DFD%04FF7DFD22FF7DFD2AFF7DFD13FF27A87DFD05FF7D52FD09FF52A8FD04FF%52FD04FF7DA8FD20FFA87DFD2AFF52FD15FF7DA8FFFFFFA852A8FD09FFA8%FD05FF7DFD05FF52A8FD1EFFA8A8FD2AFF7DA8FD16FFA852FF527D7D27FD%08FF7D7DFD06FF7DFD05FF7DA852FD1BFFA852FD2AFF52A8FD1BFF7D27FD%09FFA8FD08FF7DFD06FFA8527DFD19FF52FD28FF277D52FD1DFF527DFD09%FF7DFD08FF52FD09FF7D7DFD16FF7DA8FD28FFA852A8FD1DFFF852FD08FF%A852FD08FF27FD0AFFA827FD14FF52A8FD2BFF52FD10FF7DFD0BFF27A87D%FD08FF7DFD0AFF7DFD0BFF27A8FD10FFA852FD2DFFA8277DFD0DFF527D27%A8FD07FFA8A8FF7D27FD04FFA8A85227FD0BFF7DFD0CFF27A8FD0EFF7DA8%FD31FF7D52FD0BFF7D52277DFD06FFA87DFD04FF7D7D52A852FFFFA852FD%06FFA852FFFF52FD0DFF7D7DFD0BFF522752FD34FF52A8FD07FFA827277D%27FD07FF52FFFF7DFD0AFF7DFD06FF527DFFFF7DFD0EFF52FD05FFA82727%FFFF52A8FD37FF7DA8FD05FF7DA852FD09FF52A8FFFF7DFD0AFFA8FD06FF%7D52FD12FF52FD04FF7DF8F87D52FD3AFFA87DFFFFA852A8FF7D277DA8FD%07FF5252A8FD0BFF7D52FD04FF7DFF7DFD12FFA852FD04FF52A852FD3CFF%7D7DFF52FD06FF7DFD05FFA827FF27FFFF7DA8FD08FF52FD05FF52FFFF7D%FD13FF527D527DA87DFD3EFFA8277DFF7D277D277DA87DFD04FFA8FF27FF%27FF2752A8FD04FFA8A8527DFD05FF7DFFFF52FD14FFA87D52FD42FF7D7D%FD05FFA852FFFFFF7DA87DFFFFFF7DFFFF7DFFFFFF52A8FFA852FD05FF52%FFFF7DFD12FF7D52FD45FF7DFD04FF527DA87DFFFFFF7DFF7DFD06FF7DFF%A852A8FFFF52A8FD04FF52FFFFFF527DFD0EFF7D527DFD47FF52FFFFFF52%FFFF7DFFFFFFA8FF7DFD08FFA852FFFFFF27A8FD04FF52FD11FFA8527DFD%49FF52FFFFFF52FFFFFF27FFFF7DFFFF27FD0DFF7DFD06FF27A8FD0CFF7D%F87DA8FD4BFF7DFFFF52FD04FF7DFFFF7DFF52FD0DFFA87DFD06FF7DFD09%FF7DA8527DFD4FFF52FF527DFFFFFFA8A8FF27FF52FD0EFF52FD06FF7DFD%07FFA87D52A8FD53FF52FD05FF27A87DFF7DA8FD0EFF7DFD06FF52FD06FF%52A8FD5BFFA8A827A8277DFD0FFF52FD05FF52FD06FFA8FD5CFFA8FD05FF%7DFD0DFFA8A8FD04FF52FD06FF7DA8FD5BFF7DA8FD06FF527DFD0AFFA87D%7DFD04FF7DA8FD04FF2727FD59FF7D527D52A8FD07FF7D27A8FD09FF52FD%05FFA8A8FFFF527DFF27A8FD59FF27FD0BFF52FF7DF8FFA852A8FD04FF7D%FD04FF7DA8FFFF27FF7D7D52FD07FFA87DFFFF7DFD0EFFA8FFFFA8A8FFFF%7DFD39FF27A8FD08FF52A8FFFFFF7D52FFFFA8FFFFA8A87DFFFFFF7DFFFF%FF5252A8527DFD08FF7DFFFF7DFD0DFFA87DFFA8FF7DFF7DFF7DFD39FF52%FD08FF7DFD04FF7DFD05FF7D7DFF52FFFF7DFD04FFF8FFFF7D7D7DFD07FF%527DA852A87D7DFF7D5252A8A87D7DFFA8A87DFF7DFFA87D7DFF7DFFFF52%7D7D7DFD33FF7DFD07FF7DFD05FF7DFD04FF7DA8FFFFFFA8FF52FD04FFF8%FFFF527D27A8FD06FF7DFFFF7DFFA852FF7DA852FFFFA852FF527D27FF7D%FF7DFF7DFF7DFFFF7D7DA87DFD33FF52FD07FF52FD06FF7DFFFFFFF8FD04%FF7D52FD04FF7DF8FD0BFFA852FFFF277D7D52A87D5252A87D7D52A8FFFF%7DFFFF7D7DFF7D7DA8FFFF527D7D52A8FD33FF52FD06FF7DFD06FF52FD09%FF7D52FF52F85252FD61FF7DFD05FFA87DFD07FF52FFFF7DFD05FF52FFFF%7DFFFF52FD61FF27FD04FF7DA8A8A87DA8FFFFFFA8A8FD08FF7DA8F827FF%FF7DFD61FF7D52A827A8F87D527D52A87DA87D7DFFFF7DFD06FF7D7D7DA8%FFA87DFD61FF27FD08FF7DFFFF52A8FFFFFFA8FD0BFF52FD5FFF7D7D27A8%FD07FF7DFD08FF52FD0AFF7DA8FD5DFFA87DA8FD07FFA8527DFD14FF7DFD%5DFF7D7DFD06FFA8527D7DFD15FFA87DFD5DFFA8FD07FF27FD10FFA8FD07%FF27FD5FFF7D7DFD05FF7DFD10FFA8FD06FF52FD61FFA8FD05FFA87D52A8%FD0DFF52FD06FF7DFD60FFA827FD08FF7D7D52A8FD09FF7DFD07FF52FD60%FF52FD04FF527DFD05FF7DFD0AFF52FD06FFA8A8FD5FFF52FD04FF52FF7D%7DFFFFFF7DFD12FF7DFD61FF7D5252FD06FF7D527D527D52A8FD06FF7DFD%06FF7DA8FD6CFF27A8FFFF277DFFFFFF7D52A8FD06FF7DFD73FF7DFFFF7D%FD07FF7DFD74FF52FFFF7DFFFF27FD04FF52FD74FF7DFF7DFFFFFF52FD04%FF7DFD74FF277D52FFFFFF7DFFFFFF7DFD76FF7D7DFFFFFF52FFFFA87DFD%77FF27FD04FF52FF27FD78FFA852A852FFFFF8FD7AFFA8277D2727A8FD5C%FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Helvetica%%IncludeFont: Helvetica-Oblique%%IncludeFont: Sabon-Romanuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Helvetica Helvetica[/_Helvetica/Helvetica 0 0 0 TZ%AI3_EndEncoding TrueType%AI55J_Tsume: None%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique[/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ%AI3_EndEncoding AdobeType%AI55J_Tsume: None%AI3_BeginEncoding: _Sabon-Roman Sabon-Roman[/_Sabon-Roman/Sabon-Roman 0 0 1 TZ%AI3_EndEncoding AdobeType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (*USGS 8B intermit. pond)(*USGS 8B intermit. pond) 0 0 71.906 54.094 [%AI3_Tile(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer800 Ar1 J 0 j 0.6 w 4 M []0 d%AI3_Note:0 D0 XR1.191 4.809 m1.191 4.809 lS2.393 3.607 m2.393 3.607 lS3.596 2.404 m3.596 2.404 lS4.798 1.202 m4.798 1.202 lS1.181 10.819 m1.181 10.819 lS2.383 9.617 m2.383 9.617 lS3.585 8.415 m3.585 8.415 lS4.787 7.213 m4.787 7.213 lS5.989 6.011 m5.989 6.011 lS7.191 4.809 m7.191 4.809 lS8.393 3.607 m8.393 3.607 lS9.596 2.404 m9.596 2.404 lS10.798 1.202 m10.798 1.202 lS1.17 16.829 m1.17 16.829 lS2.373 15.627 m2.373 15.627 lS3.575 14.425 m3.575 14.425 lS4.777 13.223 m4.777 13.223 lS5.979 12.021 m5.979 12.021 lS7.181 10.819 m7.181 10.819 lS8.383 9.617 m8.383 9.617 lS9.585 8.415 m9.585 8.415 lS10.787 7.213 m10.787 7.213 lS11.989 6.011 m11.989 6.011 lS13.191 4.809 m13.191 4.809 lS14.393 3.607 m14.393 3.607 lS15.596 2.404 m15.596 2.404 lS16.798 1.202 m16.798 1.202 lS1.16 22.84 m1.16 22.84 lS2.362 21.638 m2.362 21.638 lS3.564 20.436 m3.564 20.436 lS4.766 19.233 m4.766 19.233 lS5.968 18.031 m5.968 18.031 lS7.17 16.829 m7.17 16.829 lS8.373 15.627 m8.373 15.627 lS9.575 14.425 m9.575 14.425 lS10.777 13.223 m10.777 13.223 lS11.979 12.021 m11.979 12.021 lS13.181 10.819 m13.181 10.819 lS14.383 9.617 m14.383 9.617 lS15.585 8.415 m15.585 8.415 lS16.787 7.213 m16.787 7.213 lS17.989 6.011 m17.989 6.011 lS19.191 4.809 m19.191 4.809 lS20.393 3.607 m20.393 3.607 lS21.596 2.404 m21.596 2.404 lS22.798 1.202 m22.798 1.202 lS1.15 28.85 m1.15 28.85 lS2.352 27.648 m2.352 27.648 lS3.554 26.446 m3.554 26.446 lS4.756 25.244 m4.756 25.244 lS5.958 24.042 m5.958 24.042 lS7.16 22.84 m7.16 22.84 lS8.362 21.638 m8.362 21.638 lS9.564 20.436 m9.564 20.436 lS10.766 19.233 m10.766 19.233 lS11.968 18.031 m11.968 18.031 lS13.17 16.829 m13.17 16.829 lS14.373 15.627 m14.373 15.627 lS15.575 14.425 m15.575 14.425 lS16.777 13.223 m16.777 13.223 lS17.979 12.021 m17.979 12.021 lS19.181 10.819 m19.181 10.819 lS20.383 9.617 m20.383 9.617 lS21.585 8.415 m21.585 8.415 lS22.787 7.213 m22.787 7.213 lS23.989 6.011 m23.989 6.011 lS25.191 4.809 m25.191 4.809 lS26.393 3.607 m26.393 3.607 lS27.596 2.404 m27.596 2.404 lS28.798 1.202 m28.798 1.202 lS1.139 34.86 m1.139 34.86 lS2.341 33.658 m2.341 33.658 lS3.543 32.456 m3.543 32.456 lS4.745 31.254 m4.745 31.254 lS5.948 30.052 m5.948 30.052 lS7.15 28.85 m7.15 28.85 lS8.352 27.648 m8.352 27.648 lS9.554 26.446 m9.554 26.446 lS10.756 25.244 m10.756 25.244 lS11.958 24.042 m11.958 24.042 lS13.16 22.84 m13.16 22.84 lS14.362 21.638 m14.362 21.638 lS15.564 20.436 m15.564 20.436 lS16.766 19.233 m16.766 19.233 lS17.968 18.031 m17.968 18.031 lS19.17 16.829 m19.17 16.829 lS20.373 15.627 m20.373 15.627 lS21.575 14.425 m21.575 14.425 lS22.777 13.223 m22.777 13.223 lS23.979 12.021 m23.979 12.021 lS25.181 10.819 m25.181 10.819 lS26.383 9.617 m26.383 9.617 lS27.585 8.415 m27.585 8.415 lS28.787 7.213 m28.787 7.213 lS29.989 6.011 m29.989 6.011 lS31.191 4.809 m31.191 4.809 lS32.393 3.607 m32.393 3.607 lS33.596 2.404 m33.596 2.404 lS34.798 1.202 m34.798 1.202 lS1.129 40.871 m1.129 40.871 lS2.331 39.669 m2.331 39.669 lS3.533 38.467 m3.533 38.467 lS4.735 37.265 m4.735 37.265 lS5.937 36.062 m5.937 36.062 lS7.139 34.86 m7.139 34.86 lS8.341 33.658 m8.341 33.658 lS9.543 32.456 m9.543 32.456 lS10.745 31.254 m10.745 31.254 lS11.948 30.052 m11.948 30.052 lS13.15 28.85 m13.15 28.85 lS14.352 27.648 m14.352 27.648 lS15.554 26.446 m15.554 26.446 lS16.756 25.244 m16.756 25.244 lS17.958 24.042 m17.958 24.042 lS19.16 22.84 m19.16 22.84 lS20.362 21.638 m20.362 21.638 lS21.564 20.436 m21.564 20.436 lS22.766 19.233 m22.766 19.233 lS23.968 18.031 m23.968 18.031 lS25.17 16.829 m25.17 16.829 lS26.373 15.627 m26.373 15.627 lS27.575 14.425 m27.575 14.425 lS28.777 13.223 m28.777 13.223 lS29.979 12.021 m29.979 12.021 lS31.181 10.819 m31.181 10.819 lS32.383 9.617 m32.383 9.617 lS33.585 8.415 m33.585 8.415 lS34.787 7.213 m34.787 7.213 lS35.989 6.011 m35.989 6.011 lS37.191 4.809 m37.191 4.809 lS38.393 3.607 m38.393 3.607 lS39.596 2.404 m39.596 2.404 lS40.798 1.202 m40.798 1.202 lS1.118 46.881 m1.118 46.881 lS2.32 45.679 m2.32 45.679 lS3.522 44.477 m3.522 44.477 lS4.725 43.275 m4.725 43.275 lS5.927 42.073 m5.927 42.073 lS7.129 40.871 m7.129 40.871 lS8.331 39.669 m8.331 39.669 lS9.533 38.467 m9.533 38.467 lS10.735 37.265 m10.735 37.265 lS11.937 36.062 m11.937 36.062 lS13.139 34.86 m13.139 34.86 lS14.341 33.658 m14.341 33.658 lS15.543 32.456 m15.543 32.456 lS16.745 31.254 m16.745 31.254 lS17.948 30.052 m17.948 30.052 lS19.15 28.85 m19.15 28.85 lS20.352 27.648 m20.352 27.648 lS21.554 26.446 m21.554 26.446 lS22.756 25.244 m22.756 25.244 lS23.958 24.042 m23.958 24.042 lS25.16 22.84 m25.16 22.84 lS26.362 21.638 m26.362 21.638 lS27.564 20.436 m27.564 20.436 lS28.766 19.233 m28.766 19.233 lS29.968 18.031 m29.968 18.031 lS31.17 16.829 m31.17 16.829 lS32.373 15.627 m32.373 15.627 lS33.575 14.425 m33.575 14.425 lS34.777 13.223 m34.777 13.223 lS35.979 12.021 m35.979 12.021 lS37.181 10.819 m37.181 10.819 lS38.383 9.617 m38.383 9.617 lS39.585 8.415 m39.585 8.415 lS40.787 7.213 m40.787 7.213 lS41.989 6.011 m41.989 6.011 lS43.191 4.809 m43.191 4.809 lS44.393 3.607 m44.393 3.607 lS45.596 2.404 m45.596 2.404 lS46.798 1.202 m46.798 1.202 lS1.108 52.891 m1.108 52.891 lS2.31 51.689 m2.31 51.689 lS3.512 50.487 m3.512 50.487 lS4.714 49.285 m4.714 49.285 lS5.916 48.083 m5.916 48.083 lS7.118 46.881 m7.118 46.881 lS8.32 45.679 m8.32 45.679 lS9.522 44.477 m9.522 44.477 lS10.725 43.275 m10.725 43.275 lS11.927 42.073 m11.927 42.073 lS13.129 40.871 m13.129 40.871 lS14.331 39.669 m14.331 39.669 lS15.533 38.467 m15.533 38.467 lS16.735 37.265 m16.735 37.265 lS17.937 36.062 m17.937 36.062 lS19.139 34.86 m19.139 34.86 lS20.341 33.658 m20.341 33.658 lS21.543 32.456 m21.543 32.456 lS22.745 31.254 m22.745 31.254 lS23.948 30.052 m23.948 30.052 lS25.15 28.85 m25.15 28.85 lS26.352 27.648 m26.352 27.648 lS27.554 26.446 m27.554 26.446 lS28.756 25.244 m28.756 25.244 lS29.958 24.042 m29.958 24.042 lS31.16 22.84 m31.16 22.84 lS32.362 21.638 m32.362 21.638 lS33.564 20.436 m33.564 20.436 lS34.766 19.233 m34.766 19.233 lS35.968 18.031 m35.968 18.031 lS37.17 16.829 m37.17 16.829 lS38.373 15.627 m38.373 15.627 lS39.575 14.425 m39.575 14.425 lS40.777 13.223 m40.777 13.223 lS41.979 12.021 m41.979 12.021 lS43.181 10.819 m43.181 10.819 lS44.383 9.617 m44.383 9.617 lS45.585 8.415 m45.585 8.415 lS46.787 7.213 m46.787 7.213 lS47.989 6.011 m47.989 6.011 lS49.191 4.809 m49.191 4.809 lS50.393 3.607 m50.393 3.607 lS51.596 2.404 m51.596 2.404 lS52.798 1.202 m52.798 1.202 lS5.953 54.094 m5.953 54.094 lS7.108 52.891 m7.108 52.891 lS8.31 51.689 m8.31 51.689 lS9.512 50.487 m9.512 50.487 lS10.714 49.285 m10.714 49.285 lS11.916 48.083 m11.916 48.083 lS13.118 46.881 m13.118 46.881 lS14.32 45.679 m14.32 45.679 lS15.522 44.477 m15.522 44.477 lS16.725 43.275 m16.725 43.275 lS17.927 42.073 m17.927 42.073 lS19.129 40.871 m19.129 40.871 lS20.331 39.669 m20.331 39.669 lS21.533 38.467 m21.533 38.467 lS22.735 37.265 m22.735 37.265 lS23.937 36.062 m23.937 36.062 lS25.139 34.86 m25.139 34.86 lS26.341 33.658 m26.341 33.658 lS27.543 32.456 m27.543 32.456 lS28.745 31.254 m28.745 31.254 lS29.948 30.052 m29.948 30.052 lS31.15 28.85 m31.15 28.85 lS32.352 27.648 m32.352 27.648 lS33.554 26.446 m33.554 26.446 lS34.756 25.244 m34.756 25.244 lS35.958 24.042 m35.958 24.042 lS37.16 22.84 m37.16 22.84 lS38.362 21.638 m38.362 21.638 lS39.564 20.436 m39.564 20.436 lS40.766 19.233 m40.766 19.233 lS41.968 18.031 m41.968 18.031 lS43.17 16.829 m43.17 16.829 lS44.373 15.627 m44.373 15.627 lS45.575 14.425 m45.575 14.425 lS46.777 13.223 m46.777 13.223 lS47.979 12.021 m47.979 12.021 lS49.181 10.819 m49.181 10.819 lS50.383 9.617 m50.383 9.617 lS51.585 8.415 m51.585 8.415 lS52.787 7.213 m52.787 7.213 lS53.989 6.011 m53.989 6.011 lS55.191 4.809 m55.191 4.809 lS56.393 3.607 m56.393 3.607 lS57.596 2.404 m57.596 2.404 lS58.798 1.202 m58.798 1.202 lS11.953 54.094 m11.953 54.094 lS13.108 52.891 m13.108 52.891 lS14.31 51.689 m14.31 51.689 lS15.512 50.487 m15.512 50.487 lS16.714 49.285 m16.714 49.285 lS17.916 48.083 m17.916 48.083 lS19.118 46.881 m19.118 46.881 lS20.32 45.679 m20.32 45.679 lS21.522 44.477 m21.522 44.477 lS22.725 43.275 m22.725 43.275 lS23.927 42.073 m23.927 42.073 lS25.129 40.871 m25.129 40.871 lS26.331 39.669 m26.331 39.669 lS27.533 38.467 m27.533 38.467 lS28.735 37.265 m28.735 37.265 lS29.937 36.062 m29.937 36.062 lS31.139 34.86 m31.139 34.86 lS32.341 33.658 m32.341 33.658 lS33.543 32.456 m33.543 32.456 lS34.745 31.254 m34.745 31.254 lS35.948 30.052 m35.948 30.052 lS37.15 28.85 m37.15 28.85 lS38.352 27.648 m38.352 27.648 lS39.554 26.446 m39.554 26.446 lS40.756 25.244 m40.756 25.244 lS41.958 24.042 m41.958 24.042 lS43.16 22.84 m43.16 22.84 lS44.362 21.638 m44.362 21.638 lS45.564 20.436 m45.564 20.436 lS46.766 19.233 m46.766 19.233 lS47.968 18.031 m47.968 18.031 lS49.17 16.829 m49.17 16.829 lS50.373 15.627 m50.373 15.627 lS51.575 14.425 m51.575 14.425 lS52.777 13.223 m52.777 13.223 lS53.979 12.021 m53.979 12.021 lS55.181 10.819 m55.181 10.819 lS56.383 9.617 m56.383 9.617 lS57.585 8.415 m57.585 8.415 lS58.787 7.213 m58.787 7.213 lS59.989 6.011 m59.989 6.011 lS61.191 4.809 m61.191 4.809 lS62.393 3.607 m62.393 3.607 lS63.596 2.404 m63.596 2.404 lS64.798 1.202 m64.798 1.202 lS17.953 54.094 m17.953 54.094 lS19.108 52.891 m19.108 52.891 lS20.31 51.689 m20.31 51.689 lS21.512 50.487 m21.512 50.487 lS22.714 49.285 m22.714 49.285 lS23.916 48.083 m23.916 48.083 lS25.118 46.881 m25.118 46.881 lS26.32 45.679 m26.32 45.679 lS27.522 44.477 m27.522 44.477 lS28.725 43.275 m28.725 43.275 lS29.927 42.073 m29.927 42.073 lS31.129 40.871 m31.129 40.871 lS32.331 39.669 m32.331 39.669 lS33.533 38.467 m33.533 38.467 lS34.735 37.265 m34.735 37.265 lS35.937 36.062 m35.937 36.062 lS37.139 34.86 m37.139 34.86 lS38.341 33.658 m38.341 33.658 lS39.543 32.456 m39.543 32.456 lS40.745 31.254 m40.745 31.254 lS41.948 30.052 m41.948 30.052 lS43.15 28.85 m43.15 28.85 lS44.352 27.648 m44.352 27.648 lS45.554 26.446 m45.554 26.446 lS46.756 25.244 m46.756 25.244 lS47.958 24.042 m47.958 24.042 lS49.16 22.84 m49.16 22.84 lS50.362 21.638 m50.362 21.638 lS51.564 20.436 m51.564 20.436 lS52.766 19.233 m52.766 19.233 lS53.968 18.031 m53.968 18.031 lS55.17 16.829 m55.17 16.829 lS56.373 15.627 m56.373 15.627 lS57.575 14.425 m57.575 14.425 lS58.777 13.223 m58.777 13.223 lS59.979 12.021 m59.979 12.021 lS61.181 10.819 m61.181 10.819 lS62.383 9.617 m62.383 9.617 lS63.585 8.415 m63.585 8.415 lS64.787 7.213 m64.787 7.213 lS65.989 6.011 m65.989 6.011 lS67.191 4.809 m67.191 4.809 lS68.393 3.607 m68.393 3.607 lS69.596 2.404 m69.596 2.404 lS70.798 1.202 m70.798 1.202 lS71.953 0 m71.953 0 lS23.953 54.094 m23.953 54.094 lS25.108 52.891 m25.108 52.891 lS26.31 51.689 m26.31 51.689 lS27.512 50.487 m27.512 50.487 lS28.714 49.285 m28.714 49.285 lS29.916 48.083 m29.916 48.083 lS31.118 46.881 m31.118 46.881 lS32.32 45.679 m32.32 45.679 lS33.522 44.477 m33.522 44.477 lS34.725 43.275 m34.725 43.275 lS35.927 42.073 m35.927 42.073 lS37.129 40.871 m37.129 40.871 lS38.331 39.669 m38.331 39.669 lS39.533 38.467 m39.533 38.467 lS40.735 37.265 m40.735 37.265 lS41.937 36.062 m41.937 36.062 lS43.139 34.86 m43.139 34.86 lS44.341 33.658 m44.341 33.658 lS45.543 32.456 m45.543 32.456 lS46.745 31.254 m46.745 31.254 lS47.948 30.052 m47.948 30.052 lS49.15 28.85 m49.15 28.85 lS50.352 27.648 m50.352 27.648 lS51.554 26.446 m51.554 26.446 lS52.756 25.244 m52.756 25.244 lS53.958 24.042 m53.958 24.042 lS55.16 22.84 m55.16 22.84 lS56.362 21.638 m56.362 21.638 lS57.564 20.436 m57.564 20.436 lS58.766 19.233 m58.766 19.233 lS59.968 18.031 m59.968 18.031 lS61.17 16.829 m61.17 16.829 lS62.373 15.627 m62.373 15.627 lS63.575 14.425 m63.575 14.425 lS64.777 13.223 m64.777 13.223 lS65.979 12.021 m65.979 12.021 lS67.181 10.819 m67.181 10.819 lS68.383 9.617 m68.383 9.617 lS69.585 8.415 m69.585 8.415 lS70.787 7.213 m70.787 7.213 lS71.989 6.011 m71.989 6.011 lS29.953 54.094 m29.953 54.094 lS31.108 52.891 m31.108 52.891 lS32.31 51.689 m32.31 51.689 lS33.512 50.487 m33.512 50.487 lS34.714 49.285 m34.714 49.285 lS35.916 48.083 m35.916 48.083 lS37.118 46.881 m37.118 46.881 lS38.32 45.679 m38.32 45.679 lS39.522 44.477 m39.522 44.477 lS40.725 43.275 m40.725 43.275 lS41.927 42.073 m41.927 42.073 lS43.129 40.871 m43.129 40.871 lS44.331 39.669 m44.331 39.669 lS45.533 38.467 m45.533 38.467 lS46.735 37.265 m46.735 37.265 lS47.937 36.062 m47.937 36.062 lS49.139 34.86 m49.139 34.86 lS50.341 33.658 m50.341 33.658 lS51.543 32.456 m51.543 32.456 lS52.745 31.254 m52.745 31.254 lS53.948 30.052 m53.948 30.052 lS55.15 28.85 m55.15 28.85 lS56.352 27.648 m56.352 27.648 lS57.554 26.446 m57.554 26.446 lS58.756 25.244 m58.756 25.244 lS59.958 24.042 m59.958 24.042 lS61.16 22.84 m61.16 22.84 lS62.362 21.638 m62.362 21.638 lS63.564 20.436 m63.564 20.436 lS64.766 19.233 m64.766 19.233 lS65.968 18.031 m65.968 18.031 lS67.17 16.829 m67.17 16.829 lS68.373 15.627 m68.373 15.627 lS69.575 14.425 m69.575 14.425 lS70.777 13.223 m70.777 13.223 lS71.979 12.021 m71.979 12.021 lS35.953 54.094 m35.953 54.094 lS37.108 52.891 m37.108 52.891 lS38.31 51.689 m38.31 51.689 lS39.512 50.487 m39.512 50.487 lS40.714 49.285 m40.714 49.285 lS41.916 48.083 m41.916 48.083 lS43.118 46.881 m43.118 46.881 lS44.32 45.679 m44.32 45.679 lS45.522 44.477 m45.522 44.477 lS46.725 43.275 m46.725 43.275 lS47.927 42.073 m47.927 42.073 lS49.129 40.871 m49.129 40.871 lS50.331 39.669 m50.331 39.669 lS51.533 38.467 m51.533 38.467 lS52.735 37.265 m52.735 37.265 lS53.937 36.062 m53.937 36.062 lS55.139 34.86 m55.139 34.86 lS56.341 33.658 m56.341 33.658 lS57.543 32.456 m57.543 32.456 lS58.745 31.254 m58.745 31.254 lS59.948 30.052 m59.948 30.052 lS61.15 28.85 m61.15 28.85 lS62.352 27.648 m62.352 27.648 lS63.554 26.446 m63.554 26.446 lS64.756 25.244 m64.756 25.244 lS65.958 24.042 m65.958 24.042 lS67.16 22.84 m67.16 22.84 lS68.362 21.638 m68.362 21.638 lS69.564 20.436 m69.564 20.436 lS70.766 19.233 m70.766 19.233 lS71.968 18.031 m71.968 18.031 lS41.953 54.094 m41.953 54.094 lS43.108 52.891 m43.108 52.891 lS44.31 51.689 m44.31 51.689 lS45.512 50.487 m45.512 50.487 lS46.714 49.285 m46.714 49.285 lS47.916 48.083 m47.916 48.083 lS49.118 46.881 m49.118 46.881 lS50.32 45.679 m50.32 45.679 lS51.522 44.477 m51.522 44.477 lS52.725 43.275 m52.725 43.275 lS53.927 42.073 m53.927 42.073 lS55.129 40.871 m55.129 40.871 lS56.331 39.669 m56.331 39.669 lS57.533 38.467 m57.533 38.467 lS58.735 37.265 m58.735 37.265 lS59.937 36.062 m59.937 36.062 lS61.139 34.86 m61.139 34.86 lS62.341 33.658 m62.341 33.658 lS63.543 32.456 m63.543 32.456 lS64.745 31.254 m64.745 31.254 lS65.948 30.052 m65.948 30.052 lS67.15 28.85 m67.15 28.85 lS68.352 27.648 m68.352 27.648 lS69.554 26.446 m69.554 26.446 lS70.756 25.244 m70.756 25.244 lS71.958 24.042 m71.958 24.042 lS47.953 54.094 m47.953 54.094 lS49.108 52.891 m49.108 52.891 lS50.31 51.689 m50.31 51.689 lS51.512 50.487 m51.512 50.487 lS52.714 49.285 m52.714 49.285 lS53.916 48.083 m53.916 48.083 lS55.118 46.881 m55.118 46.881 lS56.32 45.679 m56.32 45.679 lS57.522 44.477 m57.522 44.477 lS58.725 43.275 m58.725 43.275 lS59.927 42.073 m59.927 42.073 lS61.129 40.871 m61.129 40.871 lS62.331 39.669 m62.331 39.669 lS63.533 38.467 m63.533 38.467 lS64.735 37.265 m64.735 37.265 lS65.937 36.062 m65.937 36.062 lS67.139 34.86 m67.139 34.86 lS68.341 33.658 m68.341 33.658 lS69.543 32.456 m69.543 32.456 lS70.745 31.254 m70.745 31.254 lS71.948 30.052 m71.948 30.052 lS53.953 54.094 m53.953 54.094 lS55.108 52.891 m55.108 52.891 lS56.31 51.689 m56.31 51.689 lS57.512 50.487 m57.512 50.487 lS58.714 49.285 m58.714 49.285 lS59.916 48.083 m59.916 48.083 lS61.118 46.881 m61.118 46.881 lS62.32 45.679 m62.32 45.679 lS63.522 44.477 m63.522 44.477 lS64.725 43.275 m64.725 43.275 lS65.927 42.073 m65.927 42.073 lS67.129 40.871 m67.129 40.871 lS68.331 39.669 m68.331 39.669 lS69.533 38.467 m69.533 38.467 lS70.735 37.265 m70.735 37.265 lS71.937 36.062 m71.937 36.062 lS59.953 54.094 m59.953 54.094 lS61.108 52.891 m61.108 52.891 lS62.31 51.689 m62.31 51.689 lS63.512 50.487 m63.512 50.487 lS64.714 49.285 m64.714 49.285 lS65.916 48.083 m65.916 48.083 lS67.118 46.881 m67.118 46.881 lS68.32 45.679 m68.32 45.679 lS69.522 44.477 m69.522 44.477 lS70.725 43.275 m70.725 43.275 lS71.927 42.073 m71.927 42.073 lS65.953 54.094 m65.953 54.094 lS67.108 52.891 m67.108 52.891 lS68.31 51.689 m68.31 51.689 lS69.512 50.487 m69.512 50.487 lS70.714 49.285 m70.714 49.285 lS71.916 48.083 m71.916 48.083 lS71.953 54.094 m71.953 54.094 lS0.096 6.011 m0.096 6.011 lS0.086 12.021 m0.086 12.021 lS0.075 18.031 m0.075 18.031 lS0.065 24.042 m0.065 24.042 lS0.055 30.052 m0.055 30.052 lS0.044 36.062 m0.044 36.062 lS0.034 42.073 m0.034 42.073 lS0.023 48.083 m0.023 48.083 lS0.06 54.094 m0.06 54.094 lS5.953 0 m5.953 0 lS11.953 0 m11.953 0 lS17.953 0 m17.953 0 lS23.953 0 m23.953 0 lS29.953 0 m29.953 0 lS35.953 0 m35.953 0 lS41.953 0 m41.953 0 lS47.953 0 m47.953 0 lS53.953 0 m53.953 0 lS59.953 0 m59.953 0 lS65.953 0 m65.953 0 lS0.06 0 m0.06 0 lS-9.94 43.719 m-9.732 43.719 -9.565 43.886 -9.565 44.094 c-9.565 44.301 -9.732 44.469 -9.94 44.469 c-10.147 44.469 -10.315 44.301 -10.315 44.094 c-10.315 43.886 -10.147 43.719 -9.94 43.719 cs%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp8 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182838384858686878889898A8B8C8C8D8E8F8F909192929394959596979898999A9B9B9C9D9E9E9FA0A1A1A2A3A4A4A5A6A7A7A8A9AAAAABACADADAEAFB0B0B1B2B3B3B4B5B6B6B7B8B9B9BABBBCBCBDBEBFBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_BS%_1 0.75 0 0 1 50 100 Bs0.6 0 1 0 1 50 0 %_BS%_0.6 0 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink, Yellow, Green)(Pink, Yellow, Green) 0 3 Bd[<0000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020203030303030303030303030303030303030303030304040404040404040404040404040404040404040505050505050505050505050505050505050506060606060606060606060606060606060606070707070707070707070707070707070707080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D><050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F101011111212131314141515161717181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F606162636364656666676869696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F8081828383848586878788898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8A9AAABACADADAEAFB0B1B2B3><CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B7A7978777676757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A59585756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A19181817171616151414131312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202020201010101010000000000><00000000000000000000000001010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050505050505050505050505><BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>01 %_Br[0.05 0.7 0 0 1 50 100 %_BS%_0.05 0.7 0 0 1 50 100 Bs0 0.02 0.8 0 1 57 36 %_BS%_0 0.02 0.8 0 1 57 36 Bs0.45 0 0.75 0 1 37 0 %_BS%_0.45 0 0.75 0 1 37 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E6E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7E7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_BS%_0 0.04 1 0 1 50 100 Bs0 1 0.8 0 1 50 50 %_BS%_0 1 0.8 0 1 50 50 Bs0.9 0.9 0 0 1 50 0 %_BS%_0.9 0.9 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_BS%_0 1 0 0 1 50 100 Bs1 1 0 0 1 50 80 %_BS%_1 1 0 0 1 50 80 Bs1 0.0279 0 0 1 50 60 %_BS%_1 0.0279 0 0 1 50 60 Bs1 0 1 0 1 50 40 %_BS%_1 0 1 0 1 50 40 Bs0 0 1 0 1 50 20 %_BS%_0 0 1 0 1 50 20 Bs0 1 1 0 1 50 0 %_BS%_0 1 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 70 %_BS%_1 0 50 70 Bs0 0 50 0 %_BS%_0 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6>01 %_Br[0 0 1 0 1 52 19 %_BS%_0 0 1 0 1 52 19 Bs0 0.55 0.9 0 1 50 100 %_BS%_0 0.55 0.9 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Purple Radial)(Yellow & Purple Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_BS%_0 0.08 0.67 0 1 50 14 Bs1 1 0 0 1 50 100 %_BS%_1 1 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 g(K=0) Pc0 g(K=100) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.75 g(K=25) Pc0.5 g(K=50) Pc0.25 g(K=75) Pc0 g(K=100) PcBb2 (Black & White) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Black & White) Pc0.25 0 0 0 k(C=25 M=0 Y=0 K=0) Pc0.5 0 0 0 k(C=50 M=0 Y=0 K=0) Pc0.75 0 0 0 k(C=75 M=0 Y=0 K=0) Pc1 0 0 0 k(C=100 M=0 Y=0 K=0) Pc0.25 0.25 0 0 k(C=25 M=25 Y=0 K=0) Pc0.5 0.5 0 0 k(C=50 M=50 Y=0 K=0) Pc0.75 0.75 0 0 k(C=75 M=75 Y=0 K=0) Pc1 1 0 0 k(C=100 M=100 Y=0 K=0) PcBb2 (Pink, Yellow, Green) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Pink, Yellow, Green) Pc0 0.25 0 0 k(C=0 M=25 Y=0 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.75 0 0 k(C=0 M=75 Y=0 K=0) Pc0 1 0 0 k(C=0 M=100 Y=0 K=0) Pc0 0.25 0.25 0 k(C=0 M=25 Y=25 K=0) Pc0 0.5 0.5 0 k(C=0 M=50 Y=50 K=0) Pc0 0.75 0.75 0 k(C=0 M=75 Y=75 K=0) Pc0 1 1 0 k(C=0 M=100 Y=100 K=0) PcBb0 0 0 0 Bh2 (Yellow & Purple Radial) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Yellow & Purple Radial) Pc0 0 0.25 0 k(C=0 M=0 Y=25 K=0) Pc0 0 0.5 0 k(C=0 M=0 Y=50 K=0) Pc0 0 0.75 0 k(C=0 M=0 Y=75 K=0) Pc0 0 1 0 k(C=0 M=0 Y=100 K=0) Pc0.25 0 0.25 0 k(C=25 M=0 Y=25 K=0) Pc0.5 0 0.5 0 k(C=50 M=0 Y=50 K=0) Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0) Pc1 0 1 0 k(C=100 M=0 Y=100 K=0) PcBb2 (Rainbow) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Rainbow) Pc0.25 0.125 0 0 k(C=25 M=13 Y=0 K=0) Pc0.5 0.25 0 0 k(C=50 M=25 Y=0 K=0) Pc0.75 0.375 0 0 k(C=75 M=38 Y=0 K=0) Pc1 0.5 0 0 k(C=100 M=50 Y=0 K=0) Pc0.125 0.25 0 0 k(C=13 M=25 Y=0 K=0) Pc0.25 0.5 0 0 k(C=25 M=50 Y=0 K=0) Pc0.375 0.75 0 0 k(C=38 M=75 Y=0 K=0) Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0) PcBb2 (Steel Bar) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Steel Bar) Pc0 0.25 0.125 0 k(C=0 M=25 Y=13 K=0) Pc0 0.5 0.25 0 k(C=0 M=50 Y=25 K=0) Pc0 0.75 0.375 0 k(C=0 M=75 Y=38 K=0) Pc0 1 0.5 0 k(C=0 M=100 Y=50 K=0) Pc0 0.125 0.25 0 k(C=0 M=13 Y=25 K=0) Pc0 0.25 0.5 0 k(C=0 M=25 Y=50 K=0) Pc0 0.375 0.75 0 k(C=0 M=38 Y=75 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) PcBb2 (Purple, Red & Yellow) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Purple, Red & Yellow) Pc0.125 0 0.25 0 k(C=13 M=0 Y=25 K=0) Pc0.25 0 0.5 0 k(C=25 M=0 Y=50 K=0) Pc0.375 0 0.75 0 k(C=38 M=0 Y=75 K=0) Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0) Pc0.25 0 0.125 0 k(C=25 M=0 Y=13 K=0) Pc0.5 0 0.25 0 k(C=50 M=0 Y=25 K=0) Pc0.75 0 0.375 0 k(C=75 M=0 Y=38 K=0) Pc1 0 0.5 0 k(C=100 M=0 Y=50 K=0) PcBb2 (Green & Blue) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Green & Blue) Pc0.25 0.125 0.125 0 k(C=25 M=13 Y=13 K=0) Pc0.5 0.25 0.25 0 k(C=50 M=25 Y=25 K=0) Pc0.75 0.375 0.375 0 k(C=75 M=38 Y=38 K=0) Pc1 0.5 0.5 0 k(C=100 M=50 Y=50 K=0) Pc0.25 0.25 0.125 0 k(C=25 M=25 Y=13 K=0) Pc0.5 0.5 0.25 0 k(C=50 M=50 Y=25 K=0) Pc0.75 0.75 0.375 0 k(C=75 M=75 Y=38 K=0) Pc1 1 0.5 0 k(C=100 M=100 Y=50 K=0) PcBb0 0 0 0 Bh2 (Yellow & Orange Radial) -7885.5 8587.5 0 0 1 0 0 1 0 0 Bg0 BB(Yellow & Orange Radial) Pc0.125 0.25 0.125 0 k(C=13 M=25 Y=13 K=0) Pc0.25 0.5 0.25 0 k(C=25 M=50 Y=25 K=0) Pc0.375 0.75 0.375 0 k(C=38 M=75 Y=38 K=0) Pc0.5 1 0.5 0 k(C=50 M=100 Y=50 K=0) Pc0.125 0.25 0.25 0 k(C=13 M=25 Y=25 K=0) Pc0.25 0.5 0.5 0 k(C=25 M=50 Y=50 K=0) Pc0.375 0.75 0.75 0 k(C=38 M=75 Y=75 K=0) Pc0.5 1 1 0 k(C=50 M=100 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.125 0.25 0 k(C=13 M=13 Y=25 K=0) Pc0.25 0.25 0.5 0 k(C=25 M=25 Y=50 K=0) Pc0.375 0.375 0.75 0 k(C=38 M=38 Y=75 K=0) Pc0.5 0.5 1 0 k(C=50 M=50 Y=100 K=0) Pc0.25 0.125 0.25 0 k(C=25 M=13 Y=25 K=0) Pc0.5 0.25 0.5 0 k(C=50 M=25 Y=50 K=0) Pc0.75 0.375 0.75 0 k(C=75 M=38 Y=75 K=0) Pc1 0.5 1 0 k(C=100 M=50 Y=100 K=0) Pc(*USGS 8B intermit. pond) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(*USGS 8B intermit. pond) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln1 Auu0 O0.85 g800 Ar0 J 0 j 1 w 4 M []0 d%AI3_Note:0 D0 XR350.1006 396.6001 m349.8848 397.1812 345.752 398.6055 345.3008 399 c342.9004 401.1001 337.8008 403.2002 335.4004 403.5 c328.8516 404.3188 316.2266 394.4922 314.0996 400.7998 c312.6992 404.9561 320.7744 414.3442 324.9004 416.4004 c329.9795 418.9312 336.3008 423.0005 353.752 417.2427 C353.9561 417.0586 L354.4355 416.4209 354.7207 415.8853 354.2158 414.9014 c354.1377 414.749 354.1504 414.4834 354.21 414.3672 c354.9688 412.877 356.0957 411.7861 356.6406 410.1377 c356.751 409.8018 357.0781 409.5029 357.1406 409.1362 c357.3418 407.9482 356.7617 406.6377 357.5146 405.7041 c357.8086 405.3398 359.1484 404.6836 358.6758 404.3315 c358.5176 404.2129 357.6045 404.1523 357.3887 403.9941 c356.9932 403.7046 356.3652 404.1299 356.1299 403.771 c355.835 403.3203 355.6738 402.9053 355.4648 402.3901 c355.4189 402.2759 355.5313 402.4189 355.5332 402.3184 c355.5469 401.2593 354.96 400.3994 354.6328 399.4683 c354.4268 398.8809 354.6133 398.2378 354.4238 397.6885 c354.2637 397.2217 353.709 396.8315 353.6211 396.3477 c353.4023 395.1475 354.1074 395.3477 352.8008 394.5 C350.1006 396.6001 LfUuu0 g353.5498 410.3701 mFUu332.7002 375.5996 m333.5293 375.5996 334.2002 376.2715 334.2002 377.0996 c334.2002 377.9277 333.5293 378.5996 332.7002 378.5996 c331.8721 378.5996 331.2002 377.9277 331.2002 377.0996 c331.2002 376.2715 331.8721 375.5996 332.7002 375.5996 cf332.7002 377.0996 mFUUU0 A0 R0 G0.03 w [0.9 0.9 0 0 0 0 ]0 d282.2729 335.79 m282.2783 335.7832 282.2842 335.7773 282.29 335.7715 c282.5122 335.9199 l282.7339 336.1211 282.9775 336.4717 283.1855 336.7803 cS1 w []0 d111.5981 332.0986 m500.4023 332.0986 L(N) *111.5981 448.5005 m500.4023 448.5005 L(N) *254.3994 590.4019 m254.3994 201.5977 L(N) *358.5 590.4019 m358.5 201.5977 L(N) *0 To1 0 0 1 363 439 0 Tp0 TvTP-21.6742 0 Td0 Tr0 O0 g%_ 0 50 XQ/_Helvetica 5.4001 5.4001 -2.41 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 0 TA%_ 0 XL0 TY0 TV10.8001 0 XbXB0 0 5 TC100 100 200 TW25 TG0 0 0 Ti1 Ta0 1 2 2 99 Th0 Tq240 Tg0 0 Tl0 Tc0 Tw(Bartlett's Tinamou) Tx (\r) TX TO0 To1 0 0 1 363 433 0 Tp0 TvTP-24.0059 0 Td0 Tr/_Helvetica-Oblique 5.4001 5.0275 -1.2151 Tf(Crypturellus bartletti) Tx (\r) TX TO0 To1 0 0 1 363.2998 426.1001 0 Tp0 TvTP-5.2551 0 Td0 Tr/_Helvetica 5.4001 5.4001 -2.41 Tf(1[12) Tx (\r) TX TO1 A0 To1 0 0 1 324.5996 390.9004 0 Tp0 TvTP-1.5016 0 Td0 Tr(?) Tx (\r) TX TO0 Au1 To1 0 0 1 301.1772 362.5049 0 Tp0 Tv1 Ap355 332 m358 332 L381.1777 331.959 L381.1777 362.4844 L307.8535 362.5049 L307.8535 355.8262 L301.1772 355.8457 L301.1772 332 L355 332 LnTP6.6763 -5.625 Td0 Tr0 O0 g/_Sabon-Roman 6.5 6.136 -1.482 Tf1 TA36 0 XbXB0 Ta7.5 0 Tl(  Hasta 400 m ) Tx 1 0 Tk(\r) TX TOU%AI5_BeginPlace%%FileType: 0[1 0 0 1 -0.0894 -0.0449] 253.6445 331.6533 359.2188 448.5005(BOE:Birds of Ecuador map files:0 ec work:basemap4link.eps)`%%BeginDocument: BOE:Birds of Ecuador map files:0 ec work:basemap4link.eps%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 10.0%%For: (Elizabeth Clark) (EMCDesign)%%Title: (basemap4link.eps)%%CreationDate: 10/10/04 4:12 PM%%BoundingBox: 253 331 360 449%%HiResBoundingBox: 253.6445 331.6533 359.2188 448.5005%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 33 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 1296 1296%AI5_RulerUnits: 2%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 214.5 547.5 2 870 730 26 0 1 160 72 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 33%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 116 128 8%%BeginData: 9364 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD2DFF527DFD70FF7D52A8527DA8FD6DFFA852FFFFFF7D7DFD6CFF%A852FD05FF527DFD6AFF7D52FD07FFA87DFD68FF527DFD09FFA852FD65FF%A852A8FD0BFFA827A8FD5BFFA87D7D2752527D527DA8FD0DFFA85252FD59%FF527D7D52FD14FFA8FFA8277DFD55FF5252A8FD17FFA8FFA8A8A827A8FD%51FFA852A8FD18FFA8FFFFFFA8FFFF7DA8FD4EFFA87D27FD1AFFA8FFFFFF%A8FFFFA852A8FD4AFF527D527DA8FD1DFF7DFFFFA8FFFFFF52A8FD49FF7D%FD21FFA87D7D7DFFFFFFA87D527D7D7D277DA8FD42FF52FD20FFA87DFFA8%7DA8FD05FFA8A8A8FF7D52FD42FFA827A8FD1DFFA8FD05FFA8A8FD09FFA8%52FD43FF27FD1CFFA8FFFFA8FD0FFF7D52FD42FF52FD1CFF7DFD07FFA8A8%FD08FF7DFFA827FD40FF7D7DFD1BFFA8FFFFA8FD06FFA8FD0BFFA87DFD3F%FF52FD1CFFA87DFD09FFA8FD05FFA8FD05FF52FD3FFF7D7DFD16FFFD05A8%7DFD0BFF7DFD0AFF7D7DFD3EFF52FFFFFFA8FD0BFFFD04A8FFA8A8A8FFFF%FFA87DA8FD0DFFFD04A8FD05FFA852A8FD3DFF7DFFA8A8FFA8FD09FF7DFF%FD04A8FD06FF7DFD11FFA8FD05FF7DFFFF7D7D7D52527DFD0CFFA8275252%7DFD27FF52FD04FFA8FD08FFA8A8FD06FF7DA8FFFF52FD04FFA8A8FD0BFF%A8FD06FFA8FD07FFA827527DFD09FF27FFFFFF7D527DFD25FF52FD05FFA8%FD08FFA8FD08FFA8A8FFFFA8A8A8FFFFA8FD0AFFA8FD05FFA8FD0BFF7D52%7D52A8A8FD04FF7DFD05FFA827FD23FF7D7DFD06FFA87DFF7DFF7DFF7DFF%7DFD08FFA8A8FD07FFA8FD05FFA8FFA8A8FD06FF7DFD0FFF7DA87D7D5252%27FD07FF52A8FD21FF52FD09FF7DFD10FFA8FD08FF7DFFA8FFA8A8FFA8A8%FD06FFA8FD15FFA8FD08FF27FD20FF7D7DFD09FFA8FD0FFFA8A8FD10FF7D%A8FD04FFA8A8FD1EFFA8F8FD1EFFA852FD1AFFA8FD04FFA8FD0CFFA8FD05%FFA8FD20FF7D52A8A8FD1AFFA827A8FD0AFFA8FD0EFF7DFD04FF7D7D7DA8%FD0AFFA8FD05FFA8FD21FFA87D7D52527DFD16FFA852A8FD19FFA8FD05FF%7DA87DFD09FFA8A8A8FD05FFA8FD26FF7D52FD14FF527DA8FD0DFF7DFD0B%FFA8A8FD05FFA87D7DFD07FFA87DFFFFA8A8FD04FF7DFFFFA8FD25FF5252%52A8FD0FFF7D7DFD10FFA8FF7DFD08FFA8FD0EFFA8A8FD06FFA8FFA8FF7D%A8A8FFA8A87DFD25FF7D52A8FD0CFFA87DFD13FFA8A8FD07FF7DFD1AFFA8%FFFFA8FFFFFD06A8FD1CFFFD04527D52FD0DFF52A8FD14FFA8FD06FFA8A8%FD0EFF7DFD0BFF7DFD05FFA8FD06FFA8FD1AFF52A8FD10FF7DA8FD15FFA8%FD06FFA8FD1BFFA8FD06FFA8FD06FFA8FD1AFF52FD10FF52FD15FFA8FD07%FFA8FD0FFFA8FD0AFFA8FD07FFA8FD08FFA8FD18FF7DFD10FFA87DFD14FF%A8FD07FFA8A8A8FD18FF7DFD07FF7DFD08FFA8FD18FF52FD11FF52FD14FF%A8FD07FFA8A8FD0EFFA8FD0AFFA8FD06FFA8FD0AFFA8A8FD16FF52A8FD10%FF7D7DFD13FFA8FD06FF7DFD04FF7DFD09FFA8A8FD0AFFA8A87D7DA8FFFF%FFA8FD06FFA87D7DA87DA87DA8FD14FFA852FD0FFFA87D27FD13FFA8A8FD%05FF7DFD05FFA8FD08FFA8FD0BFFA8A8FFFFFD04A8FD04FF7DA8A8A8FD06%FFA87DA8FFA87D7DA8A87DFFFFA8FFA8FD07FF7DA8FD0EFF52FD14FFA8FF%FFA8FFFFA8A87DFD05FFA8A8A8FFA8A8FFFFA8FD0CFFA8A8FD08FFA87DA8%FD0BFFA87DA8FD04FFA87DA8FFFFFFFD07A8FF27FD0DFFA852FD13FFA8FF%FFFFA8A8A8FFFFA8FD0BFFA8A8FD0CFFA8FFFFA8A8FD06FF7DFD16FF7D7D%FD09FFA87D7DFD0CFF52FD1AFFA8FFA8FD0CFFA8FD0DFF7DFFFFFF7DFD06%FF7DFD18FF7DA87DFD07FF7D52FD0CFF52FD19FFA8FFFFA8FD19FFA8FFFF%FFA8FD06FFA8A8FD1BFF7DA8FD06FF52FD0BFF7D52FD11FFFD04A8FD04FF%A8FFFFA8FD0CFFA8FD0AFFA87DA8FFFFFFA8FD05FFA852A8FD1CFFA87DA8%FD04FF7DFD05FF7D52527D527D7DFD11FFA8FFFFFFA8FFFFFF7DFFFFFF7D%FD0CFFA8FD07FFFD04A8FD05FFA8FD04FFA87D7DFD1FFF7DFD04FF27FD05%FF52A8FD16FFA8FFFFFFA8FFFF7DFD04FFA8A8FD0BFFA8FD06FFA8A8FD07%FF7DFFFFFF7DA852A8A8FD1FFFA87DFFFFFFA852FD04FF52FD24FFA8FD12%FFA8FD08FFA8FFA8A8A87DFFFFA8FD20FFA87DFFFF7D52A8FFFFA87DFD16%FFA8FFFFFF7DFFFFFFA8A8FD04FF7DFD0AFFA8A8FD07FF7DFD07FFA8A8A8%7DA8FD04FFA87DA8FD1FFF5252A8FD05FF52A8FD14FF7DFFFFFFA8FD0AFF%A8FD0AFFA8A8FD07FFA8FFFFA8A87DA8FFFF7DA8FD08FF7DFD1FFF52FD08%FF27FD13FFA8FD04FFA8FD05FFA87DFFFFA852FD05FF7DFF7DA8A8FF7DFD%07FF7DFFA8A8FFFFA8A87DFD0AFFA8FD07FFA8FD17FF52FD08FFA852FD0D%FFA8FFA8FFA8FD04FFA8FD06FFA8FFA8FFFFA8A8FFFFA8FD0FFFA8FD0CFF%A8FFFFA8FFA87DFFFFFFA8FF7DFFA8FD17FF7DFD09FF7DA8FD0BFFA8FD09%FFA8FD06FFA8FD04FF7DFFA8A8FD09FF7D7DFF7DFFFFFF7DFFFFFFA8A8FF%FD06A8FD08FF7DA8FD05FFA8A8FD14FF27FD0AFFA87DFD0BFFA8FD08FF7D%FD0CFFA8FD0EFFA8FFFFA8A87DA8FFA8FD1AFFA8A8FFFFFFA8FFA8FD0CFF%7DFD0BFF52FD0BFFA8FD11FF7DFFFFFF7DFFA8FD0CFFA8FD04FFA8A8FD1E%FF7DFFA8A8FFA8FFA8FD0AFF52FD0AFF52FD0CFFA8FD07FFA8FD0DFFA8FD%0EFFA8FD05FFA8FD25FFA8FFA8FD07FF7DA8FD09FFA852FD0CFFA8FD11FF%7DFFFFFF7DFFA8A87DFFA8FD07FF7DA8A8FD04FFA8FD27FFA8A8A8FD05FF%52FD09FFA852A8FD0CFFA8FD06FFA8FD0EFFA8FD07FFFD06A8FFFFFFA8FF%FFFF7DFD2BFFA8FFFFFF7DFD09FF7DA8FD0DFFA8FD06FFA8FD0AFFA8FFFF%FF7DFFFFA8A8FD07FF7DFD06FFA8A8A8FD2BFFA8A8FF52A8FD0AFF7DFD0D%FFA8FD06FFA8FD0EFFA8FD13FFA8FD2DFFA8A87DFD0BFF52FD06A8FD06FF%A8FD07FFA8FD0AFFA8FFFFFFA8FFFFA8FD08FF7DFD06FF7DA8FD2EFF52A8%FD0BFFA87DFD05FFA8A8FFA8FFA8FD09FFA8FD09FFA8FFFF7DFFFFFFA8FD%0FFF7DFF7DFD2CFF7D7DFD0DFF52FD14FFA8FD09FFA8FFFFA8FFFFA8A8FD%07FFA8FD06FFA8FFFFFFA8A8FD29FF7D52FD0EFF52FD14FFA8FD0CFFA8FF%A8FD10FFA8FD04FFA8FD29FF52FD10FF52FD13FFA8A8FD08FFA8FF7DFFA8%FD0BFF7DFD05FFA8FD05FFA8FD26FFA852FD10FF7DA8FD14FFA8FD08FFA8%FFA8FFA8FD10FF7DFD06FFA8FD25FFA827FD11FF52FD16FFA87DA8FD05FF%A8FF7DFD0CFFA8FD05FF7DFD06FF7DA8FD24FF27FD12FF52FD19FFA8FD05%FF7DA8FFA8FD10FFA8FD07FF7DFD23FF52FD13FF52FD1AFFFD04A8FFFF7D%FFA8FD09FF7DFD07FF7DFD07FF7DA87DFD1FFF7D7DFD11FFA852A8FD1EFF%A87DA87DFD13FF7DFD09FF7DA8A8FD1BFFA852FD0FFF7D7D527DA8FD20FF%A87DFD0BFFA8FD08FFA8FD0BFF7D7DFD19FFA852A8FD0FFFA852A8FD22FF%7DA8FD14FFA8A8FD0CFF7DFD17FFA852FD13FF52FD21FFA8FF7DFD09FF7D%A8FD0AFFA8A8FD0CFF7DFD15FF5252A8FD14FF52FD12FF7DA8FD0BFFA8FF%A8A8FD16FF7DFD0DFF7DA8FD12FF27A8FD16FFA852527DFD0EFF7DA87DA8%FD08FFA8A8FFFFA8FFFF7DFFFFFFFD05A8FD0CFFA8FD0EFFA87DA8FD0FFF%52A8FD1AFFA827A8FD0BFFA8A87D52FD08FFA8FFFFFFA8FD04FFA8FD07FF%A8FD06FFA8A8FFFFFFA8FD10FFA8FD0CFFA85252A8FD1DFF527DFD08FFA8%5252A8A8A8FD08FFA8FFFFA8A8FD0CFFA8FD06FF7DA8FFFFFFA8FD10FF7D%FD0BFF7D52FD21FF7D52FD06FFA852FF52FD0AFFA8A8FFFFA8FD0DFFA8FD%05FFA8FFA8FFFFFFA8FD11FF7DFD09FF527DFD23FF7D7DFD04FF7D52FFFF%7D7D27FD09FF7DA8A8FD0EFFA8FD05FFA8FFFF7DFFA8FD12FFA87DFD06FF%A827A8FD25FF7D7D7DFF7DA8FD06FF27FD07FFA8FF7DFD15FFA8FFFFA8FF%A8FD14FFFD04A87D5252FD29FFA85252FFFF7D5252527D7D52FD07FF7DFF%7DFFFFA8A8FD07FFA8A8A8FD06FFA8FFFF7DFF7DFD16FF7D277DA8FD2CFF%A87D52FD04FFA8527DFD04FFA8FFA8FD04FFA8FFFFA8FD04FFA8A8FFFFA8%FD06FFA8FFFFA8FFA8FD14FF527D7DFD2FFFA87DFFFFFFA852527D52FFFF%FFA8FFFFA8FD08FFA8FFFFA8FFFFFFA8A8FD05FF7DFFFFFFA8FF7DFD10FF%A8525252A8FD31FF52FFFFFFA852FFFF7DA8FFFFFFA8FFA8FD09FFA8FFA8%FFFFFFA8FD06FFA8FD05FFA8FD0FFF7D7D52FD35FF52FFFFA827A8FFFF52%FD06FF7DFD0FFFA8FD07FFA8A8FD0FFFA87D5227A8FD36FFA87DFFFF52A8%FFFFFF52FFFFFFA8FFA8FD10FF7DFD07FFA8FD0DFFA852527DFD3AFF7D7D%FFFF52FFFFFFA87DFFFFA8FFA8FD10FFA8FD08FFA8FD09FFA87D52527DFD%3EFF527D52FD04FF7DA8FFA8FFA8FD11FFA8FD07FFA8FD09FF527DA8FD48%FF52A8A8FFA8A8FD11FFA8FD06FF7DFD07FFA87D52A8FD49FF52A8FFFF7D%A8FD12FFA8FD05FFA8FD08FF52A8FD4AFF27A8FD04FF7DA8FD10FFA8FD05%FFA8A8FD07FF52A8FD4AFF27FD06FFA8FD10FFA8FD0DFF7D52A8FD4AFF27%FD07FF7DFFA8FD0DFF7DFD06FFA8FD05FF7D527DFD47FFA852527D52A8FD%08FF7DA8FD0CFF7DFD06FFA8FFFFFFA8FFA8A87DFD48FF52A8FD0BFF7DFF%FFA8A8FFA8A8FD0DFFA8FFFFA87DFFA87D52A8FD48FFA852A8FD09FFA8A8%FD04FFA8FFFFA8A8FD04FFA87DFD04FFA8FFFFFFA87D7D52FF52FD4BFF52%FD09FFA8FD0AFFA8FFFFA8FFFFA8FFFFFF7DFFFFFF7D52FFFF7D7D7DFD4A%FF7DFD09FF7DFD05FF7DFD04FFA8FD08FF7DFD04FFA852FFFF52FF52A8FD%4AFF52FD07FFA8A8FD05FFA8FD05FF7DA8FFFFFFA8FFA8A8FD04FF7D7DFF%FF7D5252FD4BFF7DFD07FFA8FD07FFA8FD04FFA8FD05FFA8A8FD04FF7DFF%52FD50FF52FD07FF7DFD13FF7DA8A8FF7DA8A87DFD50FF7DFD06FFA8FD08%FFA8FD04FFA8FD06FFA8FFFF7DFFFFFF52FD50FF7DA8FD04FF7DA8FFFF7D%FFA8FFFFFFA8FFFFFFA8FD07FF7DFF52A8FFFFA87DFD51FF52A8A8A8FD05%7DA8FD04FFA8FD0DFF7DA8A8FFFF52A8FD50FFA852A8FD07FF7DFFFFFF7D%FD12FFA87DFD50FF5252A8FD07FFA8A8FD08FFA8FD0DFF27FD4CFFA87D52%7D52FD09FF7DA8FD16FF7DA8FD4CFF52A8FD09FFA8A8A8FD0DFFA8FD0AFF%52FD4CFF7D7DFD08FF7DA8FD1AFFA87DFD4CFF7D7DFD07FFA8A8FD12FFA8%FD08FF27FD4EFF525252FD05FFA8A8FD1AFF52A8FD50FF52A8FD06FFA8A8%A8FD0FFFA8FD07FF52FD4FFFA852A8FD04FFA8FD05FFA87DA8FD0CFFA8FD%07FF7DFD4FFF52FD05FF52527DFD05FFA8A8FD0BFF7DFD07FF52FD50FF52%FD04FF7D7DFF527DFFFFFFA8A8FD14FF52FD4FFFA8A8FFFFFF7D7DFFFFFF%7D7D7DFFA8FD0DFF7DFD07FF7DFD50FF527D7D527DFD06FF7D7DFF7DA87D%FD09FFA8FD07FF52A8FD51FFA87DFD09FFA85252A8A8527DA8FFFFFFA8FF%7DFD07FFA87DFD5FFFA8FFFFFFA852A8FD0CFF52A8FD64FF52FFFFFFA8FD%09FF52FD65FF7DA8FFA8FD04FF7DA8FFFFFF7DA8FD65FFA87DFFA8FD04FF%52FD04FF52FD67FFA852A8FFFFFFA87DFFFFFF7D7DFD68FF7DA8FFFFFFA8%A8FFFFFF52FD6AFF27FFFFFF7DFF7DFF52A8FD6AFFA852FFA8A8FFFF527D%FD6CFF7D5252527D5252FD4BFFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_pattern_AI5 1.1 0%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)%%Version: 1.1 0%%CreationDate: (03/26/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 95 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/@{} def/&{} def/dp{	dup null eq	{		pop		_dp 0 ne		{			0 1 _dp 1 sub _dl mod			{				_da exch get 3 get			} for			_dp 1 sub _dl mod 1 add packedarray			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll			definepattern pop		} if	}	{		_dp 0 ne _dp _dl mod 0 eq and		{			null dp		} if		7 packedarray _da exch _dp _dl mod exch put		_dp _dl mod _da 0 get 4 get 2 packedarray		/_dp _dp 1 add def	} ifelse} def/E{	_ed begin	dup 0 get type /arraytype ne	{		0		{			dup 1 add index type /arraytype eq			{				1 add			}			{				exit			} ifelse		} loop		array astore	} if	/_dd exch def	/_ury exch def	/_urx exch def	/_lly exch def	/_llx exch def	/_n exch def	/_y 0 def	/_dl 4 def	/_dp 0 def	/_da _dl array def	0 1 _dd length 1 sub	{		/_d exch _dd exch get def		0 2 _d length 2 sub		{			/_x exch def			/_c false def			/_r _d _x 1 add get cvlit def			_r _ ne			{				_urx _llx sub _ury _lly sub				[				1 0 0 1 0 0				]				[				/save cvx				_llx neg _lly neg /translate cvx				_c				{					nc /begin cvx				} if				_r dup type /stringtype eq				{					cvx				}				{					{						exec					} /forall cvx				} ifelse				_c				{					/end cvx				} if				/restore cvx				] cvx				/_fn 12 _n length add string def				_y _fn cvs pop				/_y _y 1 add def				_fn 12 _n putinterval				_fn _c false dp				_d exch _x 1 add exch put			} if		} for	} for	null dp	_n _dd /_pd end	xput} def/fc{	_fm dup concatmatrix pop} def/p{	/_fm exch ddef	9 -2 roll _pm translate fc	7 -2 roll _pm scale fc	5 -1 roll _pm rotate fc	4 -2 roll exch 0 ne	{		dup _pm rotate fc		1 -1 _pm scale fc		neg _pm rotate fc	}	{		pop	} ifelse	dup _pm rotate fc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore fc	neg _pm rotate fc	_pd exch get /_fdd exch ddef	/_pf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					patternfill				}				{					pop					fill				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_psf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					9 copy 6 npop patternashow				}				{					pop					6 copy 3 npop hvashow				} ifelse				grestore				pop			} for			pop		} for		restore		sw rmoveto	} ddef	/_pjsf	{		save		/_doClip 0 ddef		0 1 _fdd length 1 sub		{			/_fd exch _fdd exch get ddef			_fd			0 2 _fd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _fc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _fm					12 copy 6 npop patternawidthshow				}				{					pop 9 copy 3 npop hvawidthshow				} ifelse				grestore				pop			} for			pop		} for		restore		swj rmoveto	} ddef	/_lp /none ddef} def/sc{	_sm dup concatmatrix pop} def/P{	/_sm exch ddef	9 -2 roll _pm translate sc	7 -2 roll _pm scale sc	5 -1 roll _pm rotate sc	4 -2 roll exch 0 ne	{		dup _pm rotate sc		1 -1 _pm scale sc		neg _pm rotate sc	}	{		pop	} ifelse	dup _pm rotate sc	exch dup sin exch cos div 1 0 0 1 0 6 2 roll	_pm astore sc	neg _pm rotate sc	_pd exch get /_sdd exch ddef	/_ps	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					patternstroke				}				{					pop stroke				} ifelse				grestore				pop			} for			pop		} for		restore		newpath	} ddef	/_pss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					10 copy 6 npop patternashowstroke				}				{					pop 7 copy 3 npop ss				} ifelse				grestore				pop			} for			pop		} for		restore		pop sw rmoveto	} ddef	/_pjss	{		save		/_doClip 0 ddef		0 1 _sdd length 1 sub		{			/_sd exch _sdd exch get ddef			_sd			0 2 _sd length 2 sub			{				gsave				2 copy get dup _ ne				{					cvx exec _sc				}				{					pop				} ifelse				2 copy 1 add get dup _ ne				{					aload pop findfont _sm					13 copy 6 npop patternawidthshowstroke				}				{					pop 10 copy 3 npop jss				} ifelse				grestore				pop			} for			pop		} for		restore		pop swj rmoveto	} ddef	/_lp /none ddef} defenduserdict /Adobe_pattern_AI5 18 dict dup beginput/initialize{	/definepattern where	{		pop		pop pop	}	{	 begin	 begin		Adobe_pattern_AI5 begin		Adobe_pattern_AI5		{			dup xcheck			{				bind			} if			pop pop		} forall		mark		cachestatus 7 1 roll pop pop pop pop exch pop exch		{			{				10000 add				dup 2 index gt				{					exit				} if				dup setcachelimit			} loop		} stopped		cleartomark	 end 				 end	 end				Adobe_pattern_AI5 begin	} ifelse} def/terminate{	currentdict Adobe_pattern_AI5 eq	{	 end	} if} deferrordict/nocurrentpoint{	pop	stop} puterrordict/invalidaccess{	pop	stop} put/patternencoding256 array def0 1 255{	patternencoding exch ( ) 2 copy exch 0 exch put cvn put} for/definepattern{	17 dict begin	/uniform exch def	/cache exch def	/key exch def	/procarray exch def	/mtx exch matrix invertmatrix def	/height exch def	/width exch def	/ctm matrix currentmatrix def	/ptm matrix def	/str 32 string def	/slice 9 dict def	slice /s 1 put	slice /q 256 procarray length div sqrt floor cvi put	slice /b 0 put	/FontBBox	[	0 0 0 0	] def	/FontMatrix mtx matrix copy def	/Encoding patternencoding def	/FontType 3 def	/BuildChar	{		exch	 begin		/setstrokeadjust where {pop true setstrokeadjust} if		slice begin		dup q dup mul mod s idiv /i exch def		dup q dup mul mod s mod /j exch def		q dup mul idiv procarray exch get		/xl j width s div mul def		/xg j 1 add width s div mul def		/yl i height s div mul def		/yg i 1 add height s div mul def		uniform		{			1 1		}		{			width 0 dtransform			dup mul exch dup mul add sqrt dup 1 add exch div			0 height dtransform			dup mul exch dup mul add sqrt dup 1 add exch div		} ifelse		width 0 cache		{			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul			setcachedevice		}		{			setcharwidth		} ifelse		gsave		scale		newpath		xl yl moveto		xg yl lineto		xg yg lineto		xl yg lineto		closepath		clip		newpath	 end	 end		exec		grestore	} def	key currentdict definefont end} def/patterncachesize{	gsave	newpath	0 0 moveto	width 0 lineto	width height lineto	0 height lineto	closepath	patternmatrix setmatrix	pathbbox	exch ceiling 4 -1 roll floor sub 3 1 roll	ceiling exch floor sub	mul 1 add	grestore} def/patterncachelimit{	cachestatus 7 1 roll 6 npop 8 mul} def/patternpath{	exch dup begin	setfont	ctm setmatrix	concat	slice exch /b exch slice /q get dup mul mul put	FontMatrix concat	uniform	{		width 0 dtransform round width div exch round width div exch		0 height dtransform round height div exch height div exch		0 0 transform round exch round exch		ptm astore setmatrix	}	{		ptm currentmatrix pop	} ifelse	{		currentpoint	} stopped not	{		2 npop		pathbbox		true		4 index 3 index eq		4 index 3 index eq		and		{			pop false			{				{					2 npop				}				{					3 npop true				}				{					7 npop true				}				{					pop true				} pathforall			} stopped			{				5 npop true			} if		} if		{			height div ceiling height mul 4 1 roll			width div ceiling width mul 4 1 roll			height div floor height mul 4 1 roll			width div floor width mul 4 1 roll			2 index sub height div ceiling cvi exch			3 index sub width div ceiling cvi exch			4 2 roll moveto			FontMatrix mtx invertmatrix			dup dup 4 get exch 5 get rmoveto			ptm ptm concatmatrix pop			slice /s			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi			dup slice /q get gt			{				pop slice /q get			} if			put			0 1 slice /s get dup mul 1 sub			{				slice /b get add				gsave				0 1 str length 1 sub				{					str exch 2 index put				} for				pop				dup				{					gsave					ptm setmatrix					1 index str length idiv					{						str show					} repeat					1 index str length mod str exch 0 exch getinterval show					grestore					0 height rmoveto				} repeat				grestore			} for			2 npop		}		{			4 npop		} ifelse	} if end} def/patternclip{	_eo {eoclip} {clip} ifelse} def/patternstrokepath{	strokepath} def/patternmatrixmatrix def/patternfill{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternclip	Adobe_pattern_AI5 /patternpath get exec	grestore	newpath} def/patternstroke{	dup type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get	} if	gsave	patternstrokepath	true	{		{			{				newpath				moveto			}			{				lineto			}			{				curveto			}			{				closepath				3 copy				Adobe_pattern_AI5 /patternfill get exec			} pathforall			3 npop		} stopped		{			5 npop			patternclip			Adobe_pattern_AI5 /patternfill get exec		} if	}	{		patternclip		Adobe_pattern_AI5 /patternfill get exec	} ifelse	grestore	newpath} def/vpatternawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef		{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	3 npop} def/hpatternawidthshow{	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		9 index 9 index 9 index		Adobe_pattern_AI5 /patternfill get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	8 npop} def/patternashow{0 0 0 6 3 rollpatternawidthshow} def/patternawidthshow{	6 index type /dicttype eq	{		Adobe_pattern_AI5 /patternmatrix get 7 1 roll	} if	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse} def/vpatternawidthshowstroke{	7 1 roll	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			3 index setmatrix			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec			grestore			_fontRotateAdjust sub			moveto			_hvwb eq { _hvcx _hvcy rmoveto } if			_hvax _hvay rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			_hvax sub			3 index _hvwb eq { _hvcx sub } if			currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto			gsave			2 index false charpath			4 index setmatrix			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec			grestore			newpath moveto pop pop		} ifelse	} cforall	4 npop} def/hpatternawidthshowstroke{	7 1 roll	{		dup cstring exch		gsave		3 index eq { 5 index 5 index rmoveto } if		false charpath currentpoint		7 index setmatrix		10 index 10 index 10 index		Adobe_pattern_AI5 /patternstroke get exec		grestore		newpath moveto		2 copy rmoveto	} cforall	9 npop} def/patternashowstroke{	0 0 0 7 3 roll	patternawidthshowstroke} def/patternawidthshowstroke{	7 index type /dicttype eq	{		patternmatrix /patternmatrix get 8 1 roll	} if	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse} defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp9 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Green & Blue)(Green & Blue) 0 2 Bd[<99999A9A9B9B9B9C9C9D9D9D9E9E9F9F9FA0A0A1A1A1A2A2A3A3A3A4A4A5A5A5A6A6A7A7A7A8A8A9A9A9AAAAABABABACACADADADAEAEAFAFAFB0B0B1B1B1B2B2B3B3B3B4B4B5B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBCBDBDBDBEBEBFBFBFC0C0C1C1C1C2C2C3C3C3C4C4C5C5C5C6C6C7C7C7C8C8C9C9C9CACACBCBCBCCCCCDCDCDCECECFCFCFD0D0D1D1D1D2D2D3D3D3D4D4D5D5D5D6D6D7D7D7D8D8D9D9D9DADADBDBDBDCDCDDDDDDDEDEDFDFDFE0E0E1E1E1E2E2E3E3E3E4E4E5E5E5E6E6E7E7E7E8E8E9E9E9EAEAEBEBEBECECEDEDEDEEEEEFEFEFF0F0F1F1F1F2F2F3F3F3F4F4F5F5F5F6F6F7F7F7F8F8F9F9F9FAFAFBFBFBFCFCFDFDFDFEFEFFFF><000102020304050506070808090A0B0B0C0D0E0E0F101111121314141516171718191A1A1B1C1D1D1E1F20202122232324252626272829292A2B2C2C2D2E2F2F303132323334353536373838393A3B3B3C3D3E3E3F404141424344444546474748494A4A4B4C4D4D4E4F50505152535354555656575859595A5B5C5C5D5E5F5F606162626364656566676868696A6B6B6C6D6E6E6F707171727374747576777778797A7A7B7C7D7D7E7F80808182838384858686878889898A8B8C8C8D8E8F8F909192929394959596979898999A9B9B9C9D9E9E9FA0A1A1A2A3A4A4A5A6A7A7A8A9AAAAABACADADAEAFB0B0B1B2B3B3B4B5B6B6B7B8B9B9BABBBCBCBDBEBFBF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br[1 0.75 0 0 1 50 100 %_BS%_1 0.75 0 0 1 50 100 Bs0.6 0 1 0 1 50 0 %_BS%_0.6 0 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Pink, Yellow, Green)(Pink, Yellow, Green) 0 3 Bd[<0000000000000000000000000000000000000001010101010101010101010101010101010101010101010101010202020202020202020202020202020202020202020203030303030303030303030303030303030303030304040404040404040404040404040404040404040505050505050505050505050505050505050506060606060606060606060606060606060606070707070707070707070707070707070707080808080808080808080808080808080809090909090909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D><050506060606070708080809090A0A0A0B0B0C0C0D0D0E0E0F0F101011111212131314141515161717181819191A1A1B1C1C1D1D1E1F1F202021222223232425252626272828292A2A2B2C2C2D2D2E2F2F3031313233333435353637373839393A3B3B3C3D3E3E3F4040414242434445454647474849494A4B4C4C4D4E4F4F505151525354545556575758595A5A5B5C5C5D5E5F5F606162636364656666676869696A6B6C6C6D6E6F707071727373747576777778797A7B7B7C7D7E7F7F8081828383848586878788898A8B8B8C8D8E8F8F9091929394949596979898999A9B9C9D9D9E9FA0A1A2A2A3A4A5A6A7A7A8A9AAABACADADAEAFB0B1B2B3><CCCCCBCBCBCACACAC9C9C8C8C7C7C6C6C5C5C4C4C3C2C2C1C1C0C0BFBEBEBDBDBCBBBBBAB9B9B8B7B7B6B5B5B4B3B3B2B1B1B0AFAFAEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9C9C9B9A999998979696959493929291908F8E8E8D8C8B8A8A8988878686858483828181807F7E7D7C7C7B7A7978777676757473727171706F6E6D6C6B6A6A69686766656463636261605F5E5D5C5B5B5A59585756555453525151504F4E4D4C4B4A49484746464544434241403F3E3D3C3B3A39383837363534333231302F2E2D2C2B2A29282726252423222221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5B5A59585756555453525150504F4E4D4C4B4A4949484746454443434241403F3E3E3D3C3B3A3A393837363635343333323130302F2E2D2D2C2B2A2A29282827262525242323222121201F1F1E1D1D1C1C1B1A1A19181817171616151414131312121111100F0F0E0E0D0D0C0C0C0B0B0A0A090908080807070606060505050404040303030202020201010101010000000000><00000000000000000000000001010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040404050505050505050505050505050505050505050505050505050505050505050505050505050505050505><BFBFBFC0C0C0C0C0C0C0C0C0C1C1C1C1C1C1C1C1C1C2C2C2C2C2C2C2C2C2C2C3C3C3C3C3C3C3C3C3C3C4C4C4C4C4C4C4C4C4C4C5C5C5C5C5C5C5C5C5C5C5C6C6C6C6C6C6C6C6C6C6C6C6C7C7C7C7C7C7C7C7C7C7C7C7C8C8C8C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9C9CACACACACACACACACACACACACACACACACBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC>01 %_Br[0.05 0.7 0 0 1 50 100 %_BS%_0.05 0.7 0 0 1 50 100 Bs0 0.02 0.8 0 1 57 36 %_BS%_0 0.02 0.8 0 1 57 36 Bs0.45 0 0.75 0 1 37 0 %_BS%_0.45 0 0.75 0 1 37 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Purple, Red & Yellow)(Purple, Red & Yellow) 0 3 Bd[0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A><CCCCCCCDCDCDCDCDCECECECECECFCFCFCFD0D0D0D0D0D1D1D1D1D1D2D2D2D2D2D3D3D3D3D3D4D4D4D4D5D5D5D5D5D6D6D6D6D6D7D7D7D7D7D8D8D8D8D8D9D9D9D9DADADADADADBDBDBDBDBDCDCDCDCDCDDDDDDDDDDDEDEDEDEDFDFDFDFDFE0E0E0E0E0E1E1E1E1E1E2E2E2E2E2E3E3E3E3E4E4E4E4E4E5E5E5E5E5E6E6E6E6E6E7E7E7E7E7E8E8E8E8E9E9E9E9E9EAEAEAEAEAEBEBEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F0F0F1F1F1F1F1F2F2F2F2F3F3F3F3F3F4F4F4F4F4F5F5F5F5F5F6F6F6F6F6F7F7F7F7F8F8F8F8F8F9F9F9F9F9FAFAFAFAFAFBFBFBFBFBFCFCFCFCFDFDFDFDFDFEFEFEFEFEFFFFFF>01 %_Br<E6E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBECECECECECECECECECEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEEEFEFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFBFBFCFCFCFCFCFCFCFCFCFDFDFDFDFDFDFDFDFDFEFEFEFEFEFEFEFEFEFFFFFFFFFF><00010203040405060708090A0B0C0C0D0E0F10111213141415161718191A1B1C1D1D1E1F20212223242525262728292A2B2C2D2D2E2F30313233343535363738393A3B3C3D3D3E3F40414243444545464748494A4B4C4D4E4E4F50515253545556565758595A5B5C5D5E5E5F60616263646566666768696A6B6C6D6E6E6F70717273747576767778797A7B7C7D7E7E7F80818283848586878788898A8B8C8D8E8F8F90919293949596979798999A9B9C9D9E9F9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAFAFB0B1B2B3B4B5B6B7B8B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C8C9CACBCC>01 %_Br[0 0.04 1 0 1 50 100 %_BS%_0 0.04 1 0 1 50 100 Bs0 1 0.8 0 1 50 50 %_BS%_0 1 0.8 0 1 50 50 Bs0.9 0.9 0 0 1 50 0 %_BS%_0.9 0.9 0 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Rainbow)(Rainbow) 0 6 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>1001 %_Br1<0708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>001 %_Br1<00000000000000000000000000000000000001010101010101010101010101010101010101010101010101010101010101010101010102020202020202020202020202020202020202020202020202020202020202020202020203030303030303030303030303030303030303030303030303030303030303030303030304040404040404040404040404040404040404040404040404040404040404040404040405050505050505050505050505050505050505050505050505050505050505050505050506060606060606060606060606060606060606060606060606060606060606060606060707070707070707070707070707070707070707070707><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>01 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0101 %_Br0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>101 %_Br[0 1 0 0 1 50 100 %_BS%_0 1 0 0 1 50 100 Bs1 1 0 0 1 50 80 %_BS%_1 1 0 0 1 50 80 Bs1 0.0279 0 0 1 50 60 %_BS%_1 0.0279 0 0 1 50 60 Bs1 0 1 0 1 50 40 %_BS%_1 0 1 0 1 50 40 Bs0 0 1 0 1 50 20 %_BS%_0 0 1 0 1 50 20 Bs0 1 1 0 1 50 0 %_BS%_0 1 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Steel Bar)(Steel Bar) 0 3 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 70 %_BS%_1 0 50 70 Bs0 0 50 0 %_BS%_0 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Orange Radial)(Yellow & Orange Radial) 1 2 Bd[0<0001010203040506060708090A0B0C0C0D0E0F10111213131415161718191A1B1C1D1D1E1F202122232425262728292A2B2B2C2D2E2F303132333435363738393A3B3C3D3E3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F60606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C><FFFFFFFFFEFEFEFEFEFEFEFDFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F3F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEFEEEEEEEEEEEDEDEDEDEDEDECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8E8E8E8E7E7E7E7E7E6E6E6E6E6E6>01 %_Br[0 0 1 0 1 52 19 %_BS%_0 0 1 0 1 52 19 Bs0 0.55 0.9 0 1 50 100 %_BS%_0 0.55 0.9 0 1 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Purple Radial)(Yellow & Purple Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_BS%_0 0.08 0.67 0 1 50 14 Bs1 1 0 0 1 50 100 %_BS%_1 1 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (*USGS 8B intermit. pond)(*USGS 8B intermit. pond) 0 0 71.906 54.094 [%AI3_Tile(0 O 0 R 0 g 0 G) @(%AI6_BeginPatternLayer1 J 0 j 0.6 w 4 M []0 d0 XR1.191 4.809 m1.191 4.809 lS2.393 3.607 m2.393 3.607 lS3.596 2.404 m3.596 2.404 lS4.798 1.202 m4.798 1.202 lS1.181 10.819 m1.181 10.819 lS2.383 9.617 m2.383 9.617 lS3.585 8.415 m3.585 8.415 lS4.787 7.213 m4.787 7.213 lS5.989 6.011 m5.989 6.011 lS7.191 4.809 m7.191 4.809 lS8.393 3.607 m8.393 3.607 lS9.596 2.404 m9.596 2.404 lS10.798 1.202 m10.798 1.202 lS1.17 16.829 m1.17 16.829 lS2.373 15.627 m2.373 15.627 lS3.575 14.425 m3.575 14.425 lS4.777 13.223 m4.777 13.223 lS5.979 12.021 m5.979 12.021 lS7.181 10.819 m7.181 10.819 lS8.383 9.617 m8.383 9.617 lS9.585 8.415 m9.585 8.415 lS10.787 7.213 m10.787 7.213 lS11.989 6.011 m11.989 6.011 lS13.191 4.809 m13.191 4.809 lS14.393 3.607 m14.393 3.607 lS15.596 2.404 m15.596 2.404 lS16.798 1.202 m16.798 1.202 lS1.16 22.84 m1.16 22.84 lS2.362 21.638 m2.362 21.638 lS3.564 20.436 m3.564 20.436 lS4.766 19.233 m4.766 19.233 lS5.968 18.031 m5.968 18.031 lS7.17 16.829 m7.17 16.829 lS8.373 15.627 m8.373 15.627 lS9.575 14.425 m9.575 14.425 lS10.777 13.223 m10.777 13.223 lS11.979 12.021 m11.979 12.021 lS13.181 10.819 m13.181 10.819 lS14.383 9.617 m14.383 9.617 lS15.585 8.415 m15.585 8.415 lS16.787 7.213 m16.787 7.213 lS17.989 6.011 m17.989 6.011 lS19.191 4.809 m19.191 4.809 lS20.393 3.607 m20.393 3.607 lS21.596 2.404 m21.596 2.404 lS22.798 1.202 m22.798 1.202 lS1.15 28.85 m1.15 28.85 lS2.352 27.648 m2.352 27.648 lS3.554 26.446 m3.554 26.446 lS4.756 25.244 m4.756 25.244 lS5.958 24.042 m5.958 24.042 lS7.16 22.84 m7.16 22.84 lS8.362 21.638 m8.362 21.638 lS9.564 20.436 m9.564 20.436 lS10.766 19.233 m10.766 19.233 lS11.968 18.031 m11.968 18.031 lS13.17 16.829 m13.17 16.829 lS14.373 15.627 m14.373 15.627 lS15.575 14.425 m15.575 14.425 lS16.777 13.223 m16.777 13.223 lS17.979 12.021 m17.979 12.021 lS19.181 10.819 m19.181 10.819 lS20.383 9.617 m20.383 9.617 lS21.585 8.415 m21.585 8.415 lS22.787 7.213 m22.787 7.213 lS23.989 6.011 m23.989 6.011 lS25.191 4.809 m25.191 4.809 lS26.393 3.607 m26.393 3.607 lS27.596 2.404 m27.596 2.404 lS28.798 1.202 m28.798 1.202 lS1.139 34.86 m1.139 34.86 lS2.341 33.658 m2.341 33.658 lS3.543 32.456 m3.543 32.456 lS4.745 31.254 m4.745 31.254 lS5.948 30.052 m5.948 30.052 lS7.15 28.85 m7.15 28.85 lS8.352 27.648 m8.352 27.648 lS9.554 26.446 m9.554 26.446 lS10.756 25.244 m10.756 25.244 lS11.958 24.042 m11.958 24.042 lS13.16 22.84 m13.16 22.84 lS14.362 21.638 m14.362 21.638 lS15.564 20.436 m15.564 20.436 lS16.766 19.233 m16.766 19.233 lS17.968 18.031 m17.968 18.031 lS19.17 16.829 m19.17 16.829 lS20.373 15.627 m20.373 15.627 lS21.575 14.425 m21.575 14.425 lS22.777 13.223 m22.777 13.223 lS23.979 12.021 m23.979 12.021 lS25.181 10.819 m25.181 10.819 lS26.383 9.617 m26.383 9.617 lS27.585 8.415 m27.585 8.415 lS28.787 7.213 m28.787 7.213 lS29.989 6.011 m29.989 6.011 lS31.191 4.809 m31.191 4.809 lS32.393 3.607 m32.393 3.607 lS33.596 2.404 m33.596 2.404 lS34.798 1.202 m34.798 1.202 lS1.129 40.871 m1.129 40.871 lS2.331 39.669 m2.331 39.669 lS3.533 38.467 m3.533 38.467 lS4.735 37.265 m4.735 37.265 lS5.937 36.062 m5.937 36.062 lS7.139 34.86 m7.139 34.86 lS8.341 33.658 m8.341 33.658 lS9.543 32.456 m9.543 32.456 lS10.745 31.254 m10.745 31.254 lS11.948 30.052 m11.948 30.052 lS13.15 28.85 m13.15 28.85 lS14.352 27.648 m14.352 27.648 lS15.554 26.446 m15.554 26.446 lS16.756 25.244 m16.756 25.244 lS17.958 24.042 m17.958 24.042 lS19.16 22.84 m19.16 22.84 lS20.362 21.638 m20.362 21.638 lS21.564 20.436 m21.564 20.436 lS22.766 19.233 m22.766 19.233 lS23.968 18.031 m23.968 18.031 lS25.17 16.829 m25.17 16.829 lS26.373 15.627 m26.373 15.627 lS27.575 14.425 m27.575 14.425 lS28.777 13.223 m28.777 13.223 lS29.979 12.021 m29.979 12.021 lS31.181 10.819 m31.181 10.819 lS32.383 9.617 m32.383 9.617 lS33.585 8.415 m33.585 8.415 lS34.787 7.213 m34.787 7.213 lS35.989 6.011 m35.989 6.011 lS37.191 4.809 m37.191 4.809 lS38.393 3.607 m38.393 3.607 lS39.596 2.404 m39.596 2.404 lS40.798 1.202 m40.798 1.202 lS1.118 46.881 m1.118 46.881 lS2.32 45.679 m2.32 45.679 lS3.522 44.477 m3.522 44.477 lS4.725 43.275 m4.725 43.275 lS5.927 42.073 m5.927 42.073 lS7.129 40.871 m7.129 40.871 lS8.331 39.669 m8.331 39.669 lS9.533 38.467 m9.533 38.467 lS10.735 37.265 m10.735 37.265 lS11.937 36.062 m11.937 36.062 lS13.139 34.86 m13.139 34.86 lS14.341 33.658 m14.341 33.658 lS15.543 32.456 m15.543 32.456 lS16.745 31.254 m16.745 31.254 lS17.948 30.052 m17.948 30.052 lS19.15 28.85 m19.15 28.85 lS20.352 27.648 m20.352 27.648 lS21.554 26.446 m21.554 26.446 lS22.756 25.244 m22.756 25.244 lS23.958 24.042 m23.958 24.042 lS25.16 22.84 m25.16 22.84 lS26.362 21.638 m26.362 21.638 lS27.564 20.436 m27.564 20.436 lS28.766 19.233 m28.766 19.233 lS29.968 18.031 m29.968 18.031 lS31.17 16.829 m31.17 16.829 lS32.373 15.627 m32.373 15.627 lS33.575 14.425 m33.575 14.425 lS34.777 13.223 m34.777 13.223 lS35.979 12.021 m35.979 12.021 lS37.181 10.819 m37.181 10.819 lS38.383 9.617 m38.383 9.617 lS39.585 8.415 m39.585 8.415 lS40.787 7.213 m40.787 7.213 lS41.989 6.011 m41.989 6.011 lS43.191 4.809 m43.191 4.809 lS44.393 3.607 m44.393 3.607 lS45.596 2.404 m45.596 2.404 lS46.798 1.202 m46.798 1.202 lS1.108 52.891 m1.108 52.891 lS2.31 51.689 m2.31 51.689 lS3.512 50.487 m3.512 50.487 lS4.714 49.285 m4.714 49.285 lS5.916 48.083 m5.916 48.083 lS7.118 46.881 m7.118 46.881 lS8.32 45.679 m8.32 45.679 lS9.522 44.477 m9.522 44.477 lS10.725 43.275 m10.725 43.275 lS11.927 42.073 m11.927 42.073 lS13.129 40.871 m13.129 40.871 lS14.331 39.669 m14.331 39.669 lS15.533 38.467 m15.533 38.467 lS16.735 37.265 m16.735 37.265 lS17.937 36.062 m17.937 36.062 lS19.139 34.86 m19.139 34.86 lS20.341 33.658 m20.341 33.658 lS21.543 32.456 m21.543 32.456 lS22.745 31.254 m22.745 31.254 lS23.948 30.052 m23.948 30.052 lS25.15 28.85 m25.15 28.85 lS26.352 27.648 m26.352 27.648 lS27.554 26.446 m27.554 26.446 lS28.756 25.244 m28.756 25.244 lS29.958 24.042 m29.958 24.042 lS31.16 22.84 m31.16 22.84 lS32.362 21.638 m32.362 21.638 lS33.564 20.436 m33.564 20.436 lS34.766 19.233 m34.766 19.233 lS35.968 18.031 m35.968 18.031 lS37.17 16.829 m37.17 16.829 lS38.373 15.627 m38.373 15.627 lS39.575 14.425 m39.575 14.425 lS40.777 13.223 m40.777 13.223 lS41.979 12.021 m41.979 12.021 lS43.181 10.819 m43.181 10.819 lS44.383 9.617 m44.383 9.617 lS45.585 8.415 m45.585 8.415 lS46.787 7.213 m46.787 7.213 lS47.989 6.011 m47.989 6.011 lS49.191 4.809 m49.191 4.809 lS50.393 3.607 m50.393 3.607 lS51.596 2.404 m51.596 2.404 lS52.798 1.202 m52.798 1.202 lS5.953 54.094 m5.953 54.094 lS7.108 52.891 m7.108 52.891 lS8.31 51.689 m8.31 51.689 lS9.512 50.487 m9.512 50.487 lS10.714 49.285 m10.714 49.285 lS11.916 48.083 m11.916 48.083 lS13.118 46.881 m13.118 46.881 lS14.32 45.679 m14.32 45.679 lS15.522 44.477 m15.522 44.477 lS16.725 43.275 m16.725 43.275 lS17.927 42.073 m17.927 42.073 lS19.129 40.871 m19.129 40.871 lS20.331 39.669 m20.331 39.669 lS21.533 38.467 m21.533 38.467 lS22.735 37.265 m22.735 37.265 lS23.937 36.062 m23.937 36.062 lS25.139 34.86 m25.139 34.86 lS26.341 33.658 m26.341 33.658 lS27.543 32.456 m27.543 32.456 lS28.745 31.254 m28.745 31.254 lS29.948 30.052 m29.948 30.052 lS31.15 28.85 m31.15 28.85 lS32.352 27.648 m32.352 27.648 lS33.554 26.446 m33.554 26.446 lS34.756 25.244 m34.756 25.244 lS35.958 24.042 m35.958 24.042 lS37.16 22.84 m37.16 22.84 lS38.362 21.638 m38.362 21.638 lS39.564 20.436 m39.564 20.436 lS40.766 19.233 m40.766 19.233 lS41.968 18.031 m41.968 18.031 lS43.17 16.829 m43.17 16.829 lS44.373 15.627 m44.373 15.627 lS45.575 14.425 m45.575 14.425 lS46.777 13.223 m46.777 13.223 lS47.979 12.021 m47.979 12.021 lS49.181 10.819 m49.181 10.819 lS50.383 9.617 m50.383 9.617 lS51.585 8.415 m51.585 8.415 lS52.787 7.213 m52.787 7.213 lS53.989 6.011 m53.989 6.011 lS55.191 4.809 m55.191 4.809 lS56.393 3.607 m56.393 3.607 lS57.596 2.404 m57.596 2.404 lS58.798 1.202 m58.798 1.202 lS11.953 54.094 m11.953 54.094 lS13.108 52.891 m13.108 52.891 lS14.31 51.689 m14.31 51.689 lS15.512 50.487 m15.512 50.487 lS16.714 49.285 m16.714 49.285 lS17.916 48.083 m17.916 48.083 lS19.118 46.881 m19.118 46.881 lS20.32 45.679 m20.32 45.679 lS21.522 44.477 m21.522 44.477 lS22.725 43.275 m22.725 43.275 lS23.927 42.073 m23.927 42.073 lS25.129 40.871 m25.129 40.871 lS26.331 39.669 m26.331 39.669 lS27.533 38.467 m27.533 38.467 lS28.735 37.265 m28.735 37.265 lS29.937 36.062 m29.937 36.062 lS31.139 34.86 m31.139 34.86 lS32.341 33.658 m32.341 33.658 lS33.543 32.456 m33.543 32.456 lS34.745 31.254 m34.745 31.254 lS35.948 30.052 m35.948 30.052 lS37.15 28.85 m37.15 28.85 lS38.352 27.648 m38.352 27.648 lS39.554 26.446 m39.554 26.446 lS40.756 25.244 m40.756 25.244 lS41.958 24.042 m41.958 24.042 lS43.16 22.84 m43.16 22.84 lS44.362 21.638 m44.362 21.638 lS45.564 20.436 m45.564 20.436 lS46.766 19.233 m46.766 19.233 lS47.968 18.031 m47.968 18.031 lS49.17 16.829 m49.17 16.829 lS50.373 15.627 m50.373 15.627 lS51.575 14.425 m51.575 14.425 lS52.777 13.223 m52.777 13.223 lS53.979 12.021 m53.979 12.021 lS55.181 10.819 m55.181 10.819 lS56.383 9.617 m56.383 9.617 lS57.585 8.415 m57.585 8.415 lS58.787 7.213 m58.787 7.213 lS59.989 6.011 m59.989 6.011 lS61.191 4.809 m61.191 4.809 lS62.393 3.607 m62.393 3.607 lS63.596 2.404 m63.596 2.404 lS64.798 1.202 m64.798 1.202 lS17.953 54.094 m17.953 54.094 lS19.108 52.891 m19.108 52.891 lS20.31 51.689 m20.31 51.689 lS21.512 50.487 m21.512 50.487 lS22.714 49.285 m22.714 49.285 lS23.916 48.083 m23.916 48.083 lS25.118 46.881 m25.118 46.881 lS26.32 45.679 m26.32 45.679 lS27.522 44.477 m27.522 44.477 lS28.725 43.275 m28.725 43.275 lS29.927 42.073 m29.927 42.073 lS31.129 40.871 m31.129 40.871 lS32.331 39.669 m32.331 39.669 lS33.533 38.467 m33.533 38.467 lS34.735 37.265 m34.735 37.265 lS35.937 36.062 m35.937 36.062 lS37.139 34.86 m37.139 34.86 lS38.341 33.658 m38.341 33.658 lS39.543 32.456 m39.543 32.456 lS40.745 31.254 m40.745 31.254 lS41.948 30.052 m41.948 30.052 lS43.15 28.85 m43.15 28.85 lS44.352 27.648 m44.352 27.648 lS45.554 26.446 m45.554 26.446 lS46.756 25.244 m46.756 25.244 lS47.958 24.042 m47.958 24.042 lS49.16 22.84 m49.16 22.84 lS50.362 21.638 m50.362 21.638 lS51.564 20.436 m51.564 20.436 lS52.766 19.233 m52.766 19.233 lS53.968 18.031 m53.968 18.031 lS55.17 16.829 m55.17 16.829 lS56.373 15.627 m56.373 15.627 lS57.575 14.425 m57.575 14.425 lS58.777 13.223 m58.777 13.223 lS59.979 12.021 m59.979 12.021 lS61.181 10.819 m61.181 10.819 lS62.383 9.617 m62.383 9.617 lS63.585 8.415 m63.585 8.415 lS64.787 7.213 m64.787 7.213 lS65.989 6.011 m65.989 6.011 lS67.191 4.809 m67.191 4.809 lS68.393 3.607 m68.393 3.607 lS69.596 2.404 m69.596 2.404 lS70.798 1.202 m70.798 1.202 lS71.953 0 m71.953 0 lS23.953 54.094 m23.953 54.094 lS25.108 52.891 m25.108 52.891 lS26.31 51.689 m26.31 51.689 lS27.512 50.487 m27.512 50.487 lS28.714 49.285 m28.714 49.285 lS29.916 48.083 m29.916 48.083 lS31.118 46.881 m31.118 46.881 lS32.32 45.679 m32.32 45.679 lS33.522 44.477 m33.522 44.477 lS34.725 43.275 m34.725 43.275 lS35.927 42.073 m35.927 42.073 lS37.129 40.871 m37.129 40.871 lS38.331 39.669 m38.331 39.669 lS39.533 38.467 m39.533 38.467 lS40.735 37.265 m40.735 37.265 lS41.937 36.062 m41.937 36.062 lS43.139 34.86 m43.139 34.86 lS44.341 33.658 m44.341 33.658 lS45.543 32.456 m45.543 32.456 lS46.745 31.254 m46.745 31.254 lS47.948 30.052 m47.948 30.052 lS49.15 28.85 m49.15 28.85 lS50.352 27.648 m50.352 27.648 lS51.554 26.446 m51.554 26.446 lS52.756 25.244 m52.756 25.244 lS53.958 24.042 m53.958 24.042 lS55.16 22.84 m55.16 22.84 lS56.362 21.638 m56.362 21.638 lS57.564 20.436 m57.564 20.436 lS58.766 19.233 m58.766 19.233 lS59.968 18.031 m59.968 18.031 lS61.17 16.829 m61.17 16.829 lS62.373 15.627 m62.373 15.627 lS63.575 14.425 m63.575 14.425 lS64.777 13.223 m64.777 13.223 lS65.979 12.021 m65.979 12.021 lS67.181 10.819 m67.181 10.819 lS68.383 9.617 m68.383 9.617 lS69.585 8.415 m69.585 8.415 lS70.787 7.213 m70.787 7.213 lS71.989 6.011 m71.989 6.011 lS29.953 54.094 m29.953 54.094 lS31.108 52.891 m31.108 52.891 lS32.31 51.689 m32.31 51.689 lS33.512 50.487 m33.512 50.487 lS34.714 49.285 m34.714 49.285 lS35.916 48.083 m35.916 48.083 lS37.118 46.881 m37.118 46.881 lS38.32 45.679 m38.32 45.679 lS39.522 44.477 m39.522 44.477 lS40.725 43.275 m40.725 43.275 lS41.927 42.073 m41.927 42.073 lS43.129 40.871 m43.129 40.871 lS44.331 39.669 m44.331 39.669 lS45.533 38.467 m45.533 38.467 lS46.735 37.265 m46.735 37.265 lS47.937 36.062 m47.937 36.062 lS49.139 34.86 m49.139 34.86 lS50.341 33.658 m50.341 33.658 lS51.543 32.456 m51.543 32.456 lS52.745 31.254 m52.745 31.254 lS53.948 30.052 m53.948 30.052 lS55.15 28.85 m55.15 28.85 lS56.352 27.648 m56.352 27.648 lS57.554 26.446 m57.554 26.446 lS58.756 25.244 m58.756 25.244 lS59.958 24.042 m59.958 24.042 lS61.16 22.84 m61.16 22.84 lS62.362 21.638 m62.362 21.638 lS63.564 20.436 m63.564 20.436 lS64.766 19.233 m64.766 19.233 lS65.968 18.031 m65.968 18.031 lS67.17 16.829 m67.17 16.829 lS68.373 15.627 m68.373 15.627 lS69.575 14.425 m69.575 14.425 lS70.777 13.223 m70.777 13.223 lS71.979 12.021 m71.979 12.021 lS35.953 54.094 m35.953 54.094 lS37.108 52.891 m37.108 52.891 lS38.31 51.689 m38.31 51.689 lS39.512 50.487 m39.512 50.487 lS40.714 49.285 m40.714 49.285 lS41.916 48.083 m41.916 48.083 lS43.118 46.881 m43.118 46.881 lS44.32 45.679 m44.32 45.679 lS45.522 44.477 m45.522 44.477 lS46.725 43.275 m46.725 43.275 lS47.927 42.073 m47.927 42.073 lS49.129 40.871 m49.129 40.871 lS50.331 39.669 m50.331 39.669 lS51.533 38.467 m51.533 38.467 lS52.735 37.265 m52.735 37.265 lS53.937 36.062 m53.937 36.062 lS55.139 34.86 m55.139 34.86 lS56.341 33.658 m56.341 33.658 lS57.543 32.456 m57.543 32.456 lS58.745 31.254 m58.745 31.254 lS59.948 30.052 m59.948 30.052 lS61.15 28.85 m61.15 28.85 lS62.352 27.648 m62.352 27.648 lS63.554 26.446 m63.554 26.446 lS64.756 25.244 m64.756 25.244 lS65.958 24.042 m65.958 24.042 lS67.16 22.84 m67.16 22.84 lS68.362 21.638 m68.362 21.638 lS69.564 20.436 m69.564 20.436 lS70.766 19.233 m70.766 19.233 lS71.968 18.031 m71.968 18.031 lS41.953 54.094 m41.953 54.094 lS43.108 52.891 m43.108 52.891 lS44.31 51.689 m44.31 51.689 lS45.512 50.487 m45.512 50.487 lS46.714 49.285 m46.714 49.285 lS47.916 48.083 m47.916 48.083 lS49.118 46.881 m49.118 46.881 lS50.32 45.679 m50.32 45.679 lS51.522 44.477 m51.522 44.477 lS52.725 43.275 m52.725 43.275 lS53.927 42.073 m53.927 42.073 lS55.129 40.871 m55.129 40.871 lS56.331 39.669 m56.331 39.669 lS57.533 38.467 m57.533 38.467 lS58.735 37.265 m58.735 37.265 lS59.937 36.062 m59.937 36.062 lS61.139 34.86 m61.139 34.86 lS62.341 33.658 m62.341 33.658 lS63.543 32.456 m63.543 32.456 lS64.745 31.254 m64.745 31.254 lS65.948 30.052 m65.948 30.052 lS67.15 28.85 m67.15 28.85 lS68.352 27.648 m68.352 27.648 lS69.554 26.446 m69.554 26.446 lS70.756 25.244 m70.756 25.244 lS71.958 24.042 m71.958 24.042 lS47.953 54.094 m47.953 54.094 lS49.108 52.891 m49.108 52.891 lS50.31 51.689 m50.31 51.689 lS51.512 50.487 m51.512 50.487 lS52.714 49.285 m52.714 49.285 lS53.916 48.083 m53.916 48.083 lS55.118 46.881 m55.118 46.881 lS56.32 45.679 m56.32 45.679 lS57.522 44.477 m57.522 44.477 lS58.725 43.275 m58.725 43.275 lS59.927 42.073 m59.927 42.073 lS61.129 40.871 m61.129 40.871 lS62.331 39.669 m62.331 39.669 lS63.533 38.467 m63.533 38.467 lS64.735 37.265 m64.735 37.265 lS65.937 36.062 m65.937 36.062 lS67.139 34.86 m67.139 34.86 lS68.341 33.658 m68.341 33.658 lS69.543 32.456 m69.543 32.456 lS70.745 31.254 m70.745 31.254 lS71.948 30.052 m71.948 30.052 lS53.953 54.094 m53.953 54.094 lS55.108 52.891 m55.108 52.891 lS56.31 51.689 m56.31 51.689 lS57.512 50.487 m57.512 50.487 lS58.714 49.285 m58.714 49.285 lS59.916 48.083 m59.916 48.083 lS61.118 46.881 m61.118 46.881 lS62.32 45.679 m62.32 45.679 lS63.522 44.477 m63.522 44.477 lS64.725 43.275 m64.725 43.275 lS65.927 42.073 m65.927 42.073 lS67.129 40.871 m67.129 40.871 lS68.331 39.669 m68.331 39.669 lS69.533 38.467 m69.533 38.467 lS70.735 37.265 m70.735 37.265 lS71.937 36.062 m71.937 36.062 lS59.953 54.094 m59.953 54.094 lS61.108 52.891 m61.108 52.891 lS62.31 51.689 m62.31 51.689 lS63.512 50.487 m63.512 50.487 lS64.714 49.285 m64.714 49.285 lS65.916 48.083 m65.916 48.083 lS67.118 46.881 m67.118 46.881 lS68.32 45.679 m68.32 45.679 lS69.522 44.477 m69.522 44.477 lS70.725 43.275 m70.725 43.275 lS71.927 42.073 m71.927 42.073 lS65.953 54.094 m65.953 54.094 lS67.108 52.891 m67.108 52.891 lS68.31 51.689 m68.31 51.689 lS69.512 50.487 m69.512 50.487 lS70.714 49.285 m70.714 49.285 lS71.916 48.083 m71.916 48.083 lS71.953 54.094 m71.953 54.094 lS0.096 6.011 m0.096 6.011 lS0.086 12.021 m0.086 12.021 lS0.075 18.031 m0.075 18.031 lS0.065 24.042 m0.065 24.042 lS0.055 30.052 m0.055 30.052 lS0.044 36.062 m0.044 36.062 lS0.034 42.073 m0.034 42.073 lS0.023 48.083 m0.023 48.083 lS0.06 54.094 m0.06 54.094 lS5.953 0 m5.953 0 lS11.953 0 m11.953 0 lS17.953 0 m17.953 0 lS23.953 0 m23.953 0 lS29.953 0 m29.953 0 lS35.953 0 m35.953 0 lS41.953 0 m41.953 0 lS47.953 0 m47.953 0 lS53.953 0 m53.953 0 lS59.953 0 m59.953 0 lS65.953 0 m65.953 0 lS0.06 0 m0.06 0 lS-9.94 43.719 m-9.732 43.719 -9.565 43.886 -9.565 44.094 c-9.565 44.301 -9.732 44.469 -9.94 44.469 c-10.147 44.469 -10.315 44.301 -10.315 44.094 c-10.315 43.886 -10.147 43.719 -9.94 43.719 cs%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 g(K=0) Pc0 g(K=100) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.75 g(K=25) Pc0.5 g(K=50) Pc0.25 g(K=75) Pc0 g(K=100) PcBb2 (Black & White) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Black & White) Pc0.25 0 0 0 k(C=25 M=0 Y=0 K=0) Pc0.5 0 0 0 k(C=50 M=0 Y=0 K=0) Pc0.75 0 0 0 k(C=75 M=0 Y=0 K=0) Pc1 0 0 0 k(C=100 M=0 Y=0 K=0) Pc0.25 0.25 0 0 k(C=25 M=25 Y=0 K=0) Pc0.5 0.5 0 0 k(C=50 M=50 Y=0 K=0) Pc0.75 0.75 0 0 k(C=75 M=75 Y=0 K=0) Pc1 1 0 0 k(C=100 M=100 Y=0 K=0) PcBb2 (Pink, Yellow, Green) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Pink, Yellow, Green) Pc0 0.25 0 0 k(C=0 M=25 Y=0 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.75 0 0 k(C=0 M=75 Y=0 K=0) Pc0 1 0 0 k(C=0 M=100 Y=0 K=0) Pc0 0.25 0.25 0 k(C=0 M=25 Y=25 K=0) Pc0 0.5 0.5 0 k(C=0 M=50 Y=50 K=0) Pc0 0.75 0.75 0 k(C=0 M=75 Y=75 K=0) Pc0 1 1 0 k(C=0 M=100 Y=100 K=0) PcBb0 0 0 0 Bh2 (Yellow & Purple Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Yellow & Purple Radial) Pc0 0 0.25 0 k(C=0 M=0 Y=25 K=0) Pc0 0 0.5 0 k(C=0 M=0 Y=50 K=0) Pc0 0 0.75 0 k(C=0 M=0 Y=75 K=0) Pc0 0 1 0 k(C=0 M=0 Y=100 K=0) Pc0.25 0 0.25 0 k(C=25 M=0 Y=25 K=0) Pc0.5 0 0.5 0 k(C=50 M=0 Y=50 K=0) Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0) Pc1 0 1 0 k(C=100 M=0 Y=100 K=0) PcBb2 (Rainbow) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Rainbow) Pc0.25 0.125 0 0 k(C=25 M=13 Y=0 K=0) Pc0.5 0.25 0 0 k(C=50 M=25 Y=0 K=0) Pc0.75 0.375 0 0 k(C=75 M=38 Y=0 K=0) Pc1 0.5 0 0 k(C=100 M=50 Y=0 K=0) Pc0.125 0.25 0 0 k(C=13 M=25 Y=0 K=0) Pc0.25 0.5 0 0 k(C=25 M=50 Y=0 K=0) Pc0.375 0.75 0 0 k(C=38 M=75 Y=0 K=0) Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0) PcBb2 (Steel Bar) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Steel Bar) Pc0 0.25 0.125 0 k(C=0 M=25 Y=13 K=0) Pc0 0.5 0.25 0 k(C=0 M=50 Y=25 K=0) Pc0 0.75 0.375 0 k(C=0 M=75 Y=38 K=0) Pc0 1 0.5 0 k(C=0 M=100 Y=50 K=0) Pc0 0.125 0.25 0 k(C=0 M=13 Y=25 K=0) Pc0 0.25 0.5 0 k(C=0 M=25 Y=50 K=0) Pc0 0.375 0.75 0 k(C=0 M=38 Y=75 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) PcBb2 (Purple, Red & Yellow) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Purple, Red & Yellow) Pc0.125 0 0.25 0 k(C=13 M=0 Y=25 K=0) Pc0.25 0 0.5 0 k(C=25 M=0 Y=50 K=0) Pc0.375 0 0.75 0 k(C=38 M=0 Y=75 K=0) Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0) Pc0.25 0 0.125 0 k(C=25 M=0 Y=13 K=0) Pc0.5 0 0.25 0 k(C=50 M=0 Y=25 K=0) Pc0.75 0 0.375 0 k(C=75 M=0 Y=38 K=0) Pc1 0 0.5 0 k(C=100 M=0 Y=50 K=0) PcBb2 (Green & Blue) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Green & Blue) Pc0.25 0.125 0.125 0 k(C=25 M=13 Y=13 K=0) Pc0.5 0.25 0.25 0 k(C=50 M=25 Y=25 K=0) Pc0.75 0.375 0.375 0 k(C=75 M=38 Y=38 K=0) Pc1 0.5 0.5 0 k(C=100 M=50 Y=50 K=0) Pc0.25 0.25 0.125 0 k(C=25 M=25 Y=13 K=0) Pc0.5 0.5 0.25 0 k(C=50 M=50 Y=25 K=0) Pc0.75 0.75 0.375 0 k(C=75 M=75 Y=38 K=0) Pc1 1 0.5 0 k(C=100 M=100 Y=50 K=0) PcBb0 0 0 0 Bh2 (Yellow & Orange Radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Yellow & Orange Radial) Pc0.125 0.25 0.125 0 k(C=13 M=25 Y=13 K=0) Pc0.25 0.5 0.25 0 k(C=25 M=50 Y=25 K=0) Pc0.375 0.75 0.375 0 k(C=38 M=75 Y=38 K=0) Pc0.5 1 0.5 0 k(C=50 M=100 Y=50 K=0) Pc0.125 0.25 0.25 0 k(C=13 M=25 Y=25 K=0) Pc0.25 0.5 0.5 0 k(C=25 M=50 Y=50 K=0) Pc0.375 0.75 0.75 0 k(C=38 M=75 Y=75 K=0) Pc0.5 1 1 0 k(C=50 M=100 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.125 0.25 0 k(C=13 M=13 Y=25 K=0) Pc0.25 0.25 0.5 0 k(C=25 M=25 Y=50 K=0) Pc0.375 0.375 0.75 0 k(C=38 M=38 Y=75 K=0) Pc0.5 0.5 1 0 k(C=50 M=50 Y=100 K=0) Pc0.25 0.125 0.25 0 k(C=25 M=13 Y=25 K=0) Pc0.5 0.25 0.5 0 k(C=50 M=25 Y=50 K=0) Pc0.75 0.375 0.75 0 k(C=75 M=38 Y=75 K=0) Pc1 0.5 1 0 k(C=100 M=50 Y=100 K=0) Pc(*USGS 8B intermit. pond) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(*USGS 8B intermit. pond) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (Symbolism)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (Pathfinder Suite)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 A0 J 0 j 1 w 4 M []0 d0 XR111.5981 332.0986 m500.4023 332.0986 L(N) *111.5981 448.5005 m500.4023 448.5005 L(N) *254.3994 590.4019 m254.3994 201.5977 L(N) *358.5 590.4019 m358.5 201.5977 L(N) *1 Auuu0 R0 G0.51 w274.9497 372.5566 m273.9502 372.3193 272.9204 372.4229 272.3701 371.5781 c271.7759 370.666 270.7979 370.1611 270.4077 369.1689 c270.2832 368.8516 270.5127 368.293 270.2036 368.2168 c269.2593 367.9844 268.1777 366.9014 267.6724 367.7676 c267.2476 368.4951 267.2944 369.6738 267.7769 370.6309 c267.9199 370.9141 267.7397 371.3398 267.8672 371.6387 c268.6963 373.5781 271.8574 374.6025 273.9365 373.6904 c274.2451 373.5557 274.5928 374.1709 274.8213 373.6572 c274.9067 373.4648 274.9805 373.2461 275.0176 373.0176 c275.0425 372.8633 275.0806 372.5869 274.9497 372.5566 csUu266.6265 361.8984 m267.731 362.1494 L267.6548 362.1582 L270.5713 362.5195 269.3521 361.7969 271.4644 364.1328 c272.165 364.9082 273.7412 365.4824 274.0449 366.9268 C274.02 366.9268 273.9951 366.9268 273.9702 366.9268 C274.8481 367.6904 274.6489 369 275.1699 370.002 C275.145 370.002 275.105 369.998 275.1035 370.0039 c275.0225 370.3496 275.2793 370.6074 275.4004 370.8604 c275.5527 371.1777 275.5156 371.6494 275.6567 372.0127 c275.6733 372.0547 275.7383 372.29 275.9199 372.1768 C276.0601 372.668 276.2368 373.2529 275.9897 373.623 c275.3872 374.5234 274.9595 375.374 274.2803 376 c273.731 376.5059 272.6875 375.2637 272.1309 376.3945 c271.9165 376.8301 272.2808 376.9619 272.5605 377.2578 c272.7393 377.4473 272.7231 377.9521 272.5684 378.2227 c272.5181 378.3115 272.2012 378.3008 272.0303 378.2275 c270.9302 377.7588 270.3291 376.7275 269.4531 375.9453 c269.0957 375.627 268.5269 375.6475 268.2383 375.292 c267.8789 374.8496 268.3696 374.1465 267.9414 373.7051 c267.6797 373.4355 267.1353 373.6914 267.0908 373.7939 c266.6064 374.9004 265.4219 374.4902 264.6401 375.0186 c264.1738 375.333 263.7686 375.8164 263.438 376.2119 c261.7192 378.2666 259.3604 379.4756 256.7329 380.1748 c256.645 380.1982 256.4604 380.3896 256.5093 380.5732 c256.6943 381.2656 256.2998 381.5449 255.8618 381.9678 c255.418 382.3965 254.7964 382.0928 254.2764 382.4258 c254.019 382.5908 253.4287 383.2793 254.25 383.3164 c257.1143 383.4482 255.8613 382.7109 258.2446 384.4697 c259.1162 385.1133 259.022 386.2441 258.7451 387.252 C259.2886 387.2031 259.6211 387.8154 259.4277 388.1924 c259.2104 388.6152 259.2383 388.9736 259.1636 389.4219 c259.1372 389.582 258.6699 389.5059 258.6699 389.7275 c258.6699 389.7021 258.6699 389.6777 258.6699 389.6523 C258.7349 390.2334 258.9302 390.9775 258.2949 391.3018 C258.6582 391.9551 258.2651 393.0264 257.5 393.3281 c257.4131 393.3623 257.3169 393.7412 257.3198 394.002 C257.2637 393.9648 L257.1313 393.9531 257.1626 394.1514 257.0762 394.2021 c256.9634 394.2695 256.9922 394.6055 256.9736 394.582 c257.3652 395.0869 257.8457 395.4697 258.5625 395.9961 c258.7002 396.0967 258.6162 396.4619 258.7173 396.5898 c260.23 398.5049 258.5352 400.6064 257.2783 402.0557 c257.1729 402.1772 257.3203 402.5034 257.1519 402.5928 c256.9526 402.6982 256.7466 402.856 256.4951 402.8521 C256.5034 403.3315 256.5767 403.8037 256.645 404.2769 C256.5132 404.2949 256.4849 404.4395 256.4453 404.5156 c256.2339 404.9248 256.9116 405.0654 257.064 405.2925 c257.2231 405.5293 257.1519 405.9312 257.3472 406.001 c257.5693 406.0801 257.8057 406.1279 258.0513 406.1553 C258.1333 406.1641 258.2163 406.1709 258.2998 406.1758 c258.4868 406.1191 L258.4492 406.1133 L259.8784 406.1421 261.5083 405.7197 262.4995 406.6816 C262.4995 406.6318 262.4995 406.582 262.4995 406.5317 C262.7178 406.6636 262.8115 406.9072 263.0034 407.0801 c263.0669 407.1377 262.9819 407.3438 263.0459 407.4116 c263.165 407.5391 263.6777 409.2607 263.7056 409.5518 c263.7217 409.7231 264.0322 409.9102 264.1875 410.1855 c264.2275 410.2578 264.3105 410.394 264.4209 410.4722 c264.5591 410.5703 264.2769 410.8555 264.3999 411.0117 c264.5654 411.2222 264.6411 411.3779 264.7246 411.6143 c264.7876 411.7939 265.0576 411.6885 264.9746 412.0068 C265.5225 412.083 265.8101 411.4917 266.3247 411.4814 C265.7441 412.4248 264.5503 414.3828 264.1084 415.2676 c264.1675 415.6255 L264.0933 415.438 L264.2085 416.9048 264.8955 416.5171 265.2168 416.7578 c265.5503 417.0083 265.3672 417.8447 265.8403 418.2603 c266.2471 418.6172 266.6104 419.0654 266.9727 419.4604 c267.1484 419.6519 267.5649 419.71 267.7051 419.9058 c267.8306 420.082 267.876 420.1841 268.0742 420.21 c268.3677 420.248 268.6426 420.2651 268.7998 420.5566 c269.2368 421.0371 L269.4565 421.2778 269.6289 421.5713 269.8989 421.7886 c269.9526 421.832 269.9922 422.0142 270.0322 422.1196 c270.1147 422.3364 270.4683 422.3823 270.5723 422.5952 c270.8325 423.1294 271.207 423.564 271.4839 424.0781 c271.6802 424.4424 271.8003 424.8423 271.9229 425.2266 c272.0947 425.7642 272.3975 426.1602 272.5425 426.6558 c273.062 428.436 271.9907 430.4644 272.9712 431.98 c273.2002 432.334 273.8379 432.9429 273.6211 433.5117 c273.4805 433.8799 272.9248 433.9331 272.6602 434.2378 c272.5962 434.311 272.5122 434.5415 272.4795 434.5381 c271.3418 434.4189 271.2813 435.2676 271.3789 436.1616 C271.4111 436.4546 271.4346 436.5894 271.4609 436.8232 c271.481 437.0039 271.8623 437.1567 271.9673 437.2637 c272.7446 438.0513 273.7017 437.1133 274.4575 437.4512 c274.9907 437.6899 275.6924 437.7036 276.1494 438.1812 c276.2568 438.293 276.1953 438.5552 276.4497 438.5571 C276.3745 438.6069 276.3706 438.7275 276.2949 438.7773 C277.6543 439.4229 279.0542 439.959 280.1509 441.0044 c280.2412 441.0908 280.4478 441.1592 280.5703 441.1445 c281.4492 441.0381 282.7822 440.6475 283.3452 441.5898 c283.5098 441.8652 284.0513 441.7646 284.3296 441.8467 c285.5908 442.2192 287.3179 441.583 288.2344 442.1655 c289.8457 443.189 291.3359 444.3809 292.6919 445.7876 C292.9263 446.0313 293.1152 446.2368 293.3359 446.4878 C293.5698 446.7539 293.7026 447.0796 293.9854 447.2485 C293.959 447.2754 L294.2822 447.4688 294.624 447.4746 294.9756 447.707 CS316.1367 435.417 m316.3574 435.1196 316.5693 434.7954 316.7861 434.5103 C316.8574 434.418 L316.8574 434.418 L316.8994 434.3638 316.9424 434.311 316.9854 434.2612 c317.3613 433.7822 l317.3613 433.7822 l318.999 432.7432 320.0166 431.1602 320.4326 429.3569 c320.8242 427.6646 322.5332 428.0586 323.7754 428.1318 c324.9346 428.2002 324.6572 428.2998 325.5488 427.9204 c327.9912 426.8804 330.1768 425.9688 332.3008 425.771 c333.832 425.6279 335.2988 425.4697 336.8994 425.4487 c337.0635 425.4468 337.8652 424.5332 338.0664 424.6499 c338.6826 425.0063 337.9092 426.4629 337.9473 427.0776 c337.9561 427.21 338.1953 427.4502 338.4326 427.6001 c338.6611 427.7446 338.5635 428.2334 338.9346 428.313 c339.7646 428.4912 340.5576 428.1377 341.3076 427.7925 c341.5811 427.6665 341.8291 427.3828 342.0947 427.2856 c343.8857 426.6318 345.4287 425.6587 346.5352 424.1475 c347.1563 423.2998 347.4824 421.8623 348.4287 421.9619 c350.6387 422.1948 352.3076 421.4478 353.916 420.1177 C353.8779 420.1538 L354.1406 420.0337 354.418 420.0229 354.7021 419.9927 c354.7441 419.9878 354.7881 419.918 354.8213 419.9067 c355.0479 419.832 355.2578 419.7817 355.4531 419.6475 C355.3691 419.6558 L356.5322 419.647 357.5674 419.1084 358.6152 418.8188 CSUu282.311 335.6641 m281.7793 335.4189 281.1724 336.5566 280.8301 337.1729 c280.4971 337.7734 280.6953 338.415 280.9292 339.0391 c281.0015 339.2324 280.9414 339.5742 280.8018 339.5703 c279.9121 339.5449 279.604 340.1172 278.9429 340.3955 c278.0654 340.7646 276.1216 341.2969 275.5229 339.9775 c275.4316 339.7773 274.8623 340.1074 274.8745 340.5313 C274.6089 340.4824 274.4551 340.7725 274.1997 340.7559 C274.2246 340.7559 274.2539 340.7578 274.1997 340.8311 c274.0244 341.0664 273.7759 340.6895 273.7119 340.8457 c273.3091 341.8359 272.8784 342.4482 271.7251 342.4551 c271.623 342.4561 271.499 342.7793 271.4121 342.7988 c270.4292 343.0176 270.4023 344.1387 269.5425 344.4082 c269.165 344.5273 268.7451 344.1895 268.668 344.0146 c268.2124 342.9834 267.6265 342.3877 266.7495 341.7168 c266.228 341.3193 265.502 340.7744 264.7949 340.5498 c265.5269 340.7822 264.1743 340.2832 262.7847 341.6729 c261.3286 343.1289 264.0977 344.9502 265.5488 346.1133 c265.6528 346.1973 265.5181 346.4961 265.4336 346.4814 c264.2144 346.2666 263.4067 346.9141 262.6167 347.6279 c262.1934 348.0107 262.7964 348.4512 262.7246 349.0059 C262.8784 348.9844 263.0435 349.1172 263.0566 349.168 c263.1733 349.6055 263.5869 349.9619 263.877 350.0215 c264.9224 350.2324 265.9536 350.2822 266.9883 350.6162 c267.437 350.7617 267.8765 350.9414 268.1187 351.2451 c268.418 351.6211 268.7954 351.6621 269.2456 351.7324 c269.3726 351.7529 269.5928 351.8691 269.5796 351.9189 c269.3672 352.6982 269.2515 353.4434 269.1245 354.248 c269.1138 354.3164 268.9497 354.4902 268.9214 354.5723 c268.6929 355.2285 269.2031 356.0957 268.7251 356.583 c268.2178 357.1006 268.293 357.9492 268.1108 358.5801 c267.9922 358.9922 268.0518 359.5693 267.8267 359.8145 c267.6826 359.9697 267.4238 360.1328 267.1348 360.2734 c267.1455 360.2676 267.1528 360.2783 267.1592 360.2842 C265.1294 361.3408 266.1035 361.8945 266.4927 361.9316 C266.5659 361.9385 266.6182 361.9277 266.6265 361.8984 cSU294.9756 447.707 m294.9756 447.6885 L296.085 447.8091 L296.5293 447.6318 295.96 447.3452 296.2705 446.9736 c296.3232 446.9102 297.3721 446.9189 297.3604 446.9277 c297.7373 446.6377 297.0225 446.1807 297.3457 445.9858 c298.9326 445.0283 299.8457 444.1196 301.2354 442.729 c301.416 442.5493 301.8018 442.5532 301.9932 442.3516 c302.9043 441.3862 304.0039 440.8618 305.2334 440.4663 c305.4463 440.3979 305.5693 440.0942 305.7822 440.0073 c306.748 439.6152 307.4492 438.7056 308.04 437.9517 c309.4053 436.208 312.0742 435.0112 314.3252 436.231 c315.0752 436.6377 315.6289 436.0991 316.1367 435.417 CS358.6152 418.8188 m358.6621 418.8052 358.7109 418.7925 358.7588 418.7803 c358.1416 418.0576 l357.4453 417.2559 356.1191 417.7393 355.168 418.0605 c354.6191 418.2456 352.9199 418.3022 353.3789 417.6465 c354.1094 416.6021 354.8652 416.0903 354.1836 414.7646 c354.1055 414.6123 354.1182 414.3467 354.1777 414.2305 c354.9365 412.7402 356.0635 411.6494 356.6084 410.001 c356.7197 409.665 357.0459 409.3662 357.1084 408.9995 c357.3096 407.8115 356.7295 406.501 357.4824 405.5674 c357.7764 405.2031 359.1162 404.5469 358.6436 404.1948 c358.4854 404.0762 357.5723 404.0156 357.3564 403.8574 c356.9609 403.5679 356.333 403.9932 356.0986 403.6343 c355.8027 403.1836 355.6416 402.7686 355.4326 402.2534 c355.3867 402.1392 355.499 402.2822 355.501 402.1816 c355.5146 401.1221 354.9277 400.2627 354.6006 399.3311 c354.3945 398.7441 354.5811 398.1006 354.3916 397.5518 c354.2314 397.085 353.6768 396.6943 353.5889 396.2109 c353.3701 395.0107 352.9531 393.9746 352.3691 392.9941 c352.0449 392.4795 l350.4229 390.0547 347.7314 388 345.6895 384.8477 c345.5205 384.5859 345.4424 384.2793 345.2617 384.0635 c343.8975 382.4297 342.2568 381.2969 340.4063 380.2246 c340.0166 379.999 340.6572 379.5156 340.332 379.2188 c339.9902 378.9072 338.6123 379 338.207 378.7939 c337.8652 378.6191 337.5127 378.3398 337.2002 378.0313 c336.0225 376.8711 334.7012 375.957 333.2959 375.1914 cSu333.2959 375.1914 m330.1455 373.4756 326.5693 372.5029 323.207 371.165 c321.5879 370.5215 319.8623 370.1738 318.1328 369.6914 c317.6777 369.5645 317.7871 369.4707 317.3467 369.335 c316.1943 368.9785 314.6611 368.4834 313.3867 368.2822 C313.4443 368.2813 L312.8057 368.0625 l311.9639 367.9258 310.5088 367.0234 309.7393 366.5322 c308.582 365.792 307.9541 364.374 306.707 363.8926 c305.2979 363.3477 304.7061 361.8525 304.2627 360.6396 c304.0869 360.1563 304.5264 359.5547 304.918 359.0322 c305.1133 358.7715 305.8203 358.2979 305.6533 358.0928 c305.3135 357.6787 304.0889 357.3193 303.7783 357.7119 c303.1299 358.5361 303.4004 359.9004 302.3623 360.4033 c301.9053 360.624 300.8564 360.3672 300.75 360.1064 c300.0068 358.2822 300.7549 356.4063 300.458 354.4805 c300.4014 354.1152 300.3838 353.748 300.1865 353.457 c298.9248 351.5928 297.8457 349.7783 297.2686 347.665 c297.2012 347.4199 296.8086 347.3799 296.7744 347.0566 C296.7744 347.1123 296.6963 347.1816 296.6846 347.2656 C296.7002 347.3564 L296.168 346.293 295.9502 345.0508 295.4912 344.0537 c294.999 342.9854 294.8916 341.8232 294.3564 340.8047 c293.9121 339.959 293.0273 339.0156 292.9268 337.9219 c292.8071 336.6279 291.7285 335.5459 291.1724 334.2529 c290.98 333.8047 290.541 333.4775 290.2168 333.0732 c290.0532 332.8691 290.0635 332.5039 289.7896 332.3789 c289.4609 332.2275 289.1768 331.9717 288.8218 331.9316 c288.0566 331.8438 286.9658 332.4443 286.2373 331.9082 c285.2808 331.2041 284.1279 332.2422 283.604 333.3848 c283.5264 333.5537 283.1768 333.624 283.0908 333.8008 c282.8687 334.2539 282.8828 334.8203 282.6235 335.25 c282.5342 335.3984 282.3818 335.5029 282.2578 335.6348 cSUUuu0.285 w333.1182 375.2559 m333.1318 375.2324 333.1455 375.2109 333.1621 375.1895 c333.0635 375.3242 331.7031 375.2529 331.0293 375.2168 c327.0713 375.0029 326.2451 375.9482 324.9434 379.0771 c324.7617 379.5127 323.9619 379.6289 323.502 380.043 c323.4082 380.1279 323.3271 380.2666 323.2402 380.3359 c323.0635 380.4736 322.8223 380.5273 322.6328 380.6748 c322.3457 380.8984 322.1582 381.1982 321.8574 381.3877 c320.6523 382.1484 319.6777 382.9238 318.4824 383.7139 c317.7168 384.2197 316.8613 384.3281 316.0664 384.7236 c315.9404 384.7861 315.8428 384.9688 315.7588 384.9736 c314.0596 385.0811 313.1699 386.4365 312.2363 387.6396 cSUu310.792 401.4453 m310.999 401.5088 311.1992 401.6123 311.374 401.7432 c312.166 402.3408 313.2334 402.106 314.1797 402.0303 c314.2969 402.021 314.416 401.8701 314.5596 401.8491 c315.0117 401.7832 315.4141 401.7041 315.8213 401.4697 c316.1475 401.2832 316.7275 401.415 316.7324 401.9111 c316.7324 401.9585 317.7002 402.3428 317.79 402.6543 c318.0527 403.564 318.9365 403.8843 319.7666 403.9985 c319.792 404.002 319.8281 404.1323 319.8867 404.1465 c320.4932 404.2949 320.9443 404.6509 321.5244 404.8599 c321.5781 404.8794 321.6006 405.0029 321.6836 405.0596 c322.334 405.5063 323.0205 405.7495 323.332 406.4863 c323.5166 406.9219 324.0322 407.4136 324.1152 407.8154 c324.2764 408.5913 323.7842 410.6982 325.9541 410.8408 c326.3223 410.8652 326.3828 411.4507 326.6924 411.5605 c327.2441 411.7554 327.9131 411.4551 328.4951 411.6592 c329.0117 411.8408 329.4902 412.0605 329.9971 412.2852 c330.1377 412.3477 330.29 412.4478 330.4297 412.4956 c331.1621 412.7471 331.8623 412.3101 332.5977 412.2075 c333.3545 412.1025 334.0576 412.4727 334.7949 412.313 c335.2256 412.2202 335.5869 411.8818 336.0156 411.7188 c336.3213 411.6025 337.2295 410.8154 337.5371 410.7583 c338.5527 410.5703 340.0889 411.771 340.9268 411.9297 c341.749 412.0864 342.4736 411.8965 343.1875 411.5459 c343.6914 411.2983 344.0146 410.4487 344.6699 410.5366 c344.7109 410.542 345.1533 410.0781 345.4453 409.897 c345.6191 409.7891 345.8408 409.7432 346.0371 409.6724 c346.8242 409.3887 347.4746 408.8159 348.3496 408.707 c348.5791 408.6782 348.79 408.4673 349.0195 408.3755 c349.5693 408.1563 350.1143 407.9473 350.6377 407.647 c350.9883 407.4473 351.3818 407.3633 351.7393 407.1724 c351.957 407.0562 352.0898 406.833 352.2695 406.6611 c352.3457 406.5874 352.4805 406.5474 352.501 406.4365 c352.5615 406.1143 352.8447 405.8608 353.0361 405.6499 c353.2314 405.4365 353.2354 405.0474 353.4561 404.8081 c353.7236 404.5176 354.0918 404.3926 354.4014 404.125 c354.5146 404.0273 354.6943 404.0928 354.8242 403.9844 c354.9893 403.8472 355.0615 403.6504 355.2178 403.5146 c355.2002 403.5288 355.1738 403.5708 355.1416 403.6084 C355.3223 403.4644 355.4658 403.2808 355.6484 403.1396 cSUUu0.21 w320.0127 430.5195 m319.1143 427.2856 317.3994 424.4014 317.1709 420.9287 c317.1152 420.083 317.5674 418.8887 317.3369 417.9136 c316.4326 414.0938 315.6152 412.7534 314.7852 409.856 c314.5479 409.0264 314.2539 408.0225 313.8447 407.5728 c312.8994 406.5371 309.5527 406.3281 308.4756 405.4243 c307.9121 404.9507 308.5547 403.3359 309.0566 402.2471 c309.3291 401.6543 308.9658 400.7031 308.6768 399.8965 c308.2393 398.6797 310.4082 397.8584 310.0439 396.6396 c309.6807 395.4238 309.4971 394.0508 308.9307 393.209 c307.5781 391.1934 306.749 389.1348 306.0977 386.9629 c305.9697 386.5352 306.7441 385.8008 307.0146 385.1768 c307.3076 384.498 308.3125 384.8193 308.3125 384.0195 C309.1172 384.0234 307.8594 381.5313 308.2197 381.7617 c309.2549 382.4268 309.542 381.3203 309.6445 380.9697 c310.0547 379.5645 309.7783 377.9824 309.416 376.4697 c309.0371 374.8896 309.4863 373.2891 308.5371 371.7656 c308.4502 371.626 307.9131 371.6172 307.7656 371.7695 c305.9014 373.7061 307.1553 376.4316 306.1299 378.5801 c306.0732 378.6982 305.4717 378.7109 305.3877 378.5732 c303.9746 376.2607 305.2109 373.29 302.7549 371.249 c302.1201 370.7207 303.2246 369.9404 304.1123 370.2197 C303.8115 369.9189 303.4131 369.6641 303.2627 369.2979 c301.6436 365.335 297.8545 362.8086 295.5361 359.043 c295.252 358.5801 294.8506 357.8213 294.6689 357.2676 c294.2188 355.8984 293.9619 353.54 294.9443 353.1992 c295.0693 353.1563 295.21 352.9775 295.2803 353.0732 c295.4463 353.2979 295.4824 353.5762 295.6504 353.7988 c295.7822 353.9736 296.0479 353.9316 296.1602 354.1484 C296.3779 353.8477 296.4697 353.4736 296.5244 353.1025 c296.5479 352.9404 296.833 352.9287 296.9287 353.04 c297.1377 353.2793 297.0859 353.6162 297.1475 353.9287 c297.2119 354.2637 297.0869 354.5908 297.1484 354.9336 c297.1748 355.0752 297.2207 355.2061 297.2607 355.3447 c297.332 355.5879 297.5967 355.7002 297.7852 355.7549 c298.1553 355.8633 298.249 356.1982 298.5791 356.4072 c298.6816 356.4727 298.9502 356.6055 299.0322 356.6787 c299.0713 356.7139 299.1367 356.7148 299.1768 356.7588 c299.5635 357.1904 299.9541 357.5947 300.0684 358.167 c300.167 358.6631 300.1162 359.1709 299.8584 359.6152 c299.7275 359.8398 299.9541 359.9512 299.748 360.1211 c299.7197 360.1445 299.7598 360.1494 299.748 360.1211 c299.7646 360.1611 299.8701 360.3018 299.8877 360.3223 c300.0967 360.5576 299.873 360.6719 300.0908 360.9043 c300.3135 361.1426 300.4336 361.4404 300.708 361.6348 c301.8701 362.459 301.1914 362.5488 302.8135 361.1426 c302.9287 361.043 303.0957 360.9199 303.2314 361.0303 c303.7803 361.4766 303.5156 362.2607 303.9492 362.79 c304.04 362.9004 304.2197 363.0146 304.3721 363.0127 c304.665 363.0088 305.0498 362.998 305.2354 362.6982 cS304.4268 440.7622 m302.4922 438.8213 305.8018 437.1484 305.5117 435.0337 c305.5068 434.9922 304.8838 434.9219 304.7852 435.0684 c303.4775 437.0166 302.4971 435.6064 301.2803 434.7734 c299.3174 433.4287 299.2021 431.0576 298.4971 428.7866 c298.4336 428.5854 297.3125 428.7197 296.6123 428.7197 C297.1992 427.0068 295.5996 426.8872 295.1123 425.4194 C295.3115 425.4194 295.5127 425.4194 295.7119 425.4194 C295.6299 424.8066 296.5029 424.5762 296.3125 423.9194 C295.667 424.209 295.3584 423.5205 295.2217 423.2617 c294.3916 421.6929 293.5527 420.4341 292.6318 418.9805 c292.0513 418.0649 292.0366 416.6406 291.7651 415.4614 c291.3296 413.5718 290.6152 411.8022 290.4653 409.8306 c290.4287 409.354 289.6328 408.7344 289.585 408.3003 c289.4351 406.9297 290.1206 405.4961 290.3794 404.0767 c291.0723 400.2764 290.5996 396.5137 290.4487 392.7256 c290.4272 392.1787 289.584 391.5977 289.4946 390.9082 c289.1016 387.8701 288.0884 384.8389 289.1123 381.9189 C286.8408 377.6455 283.0425 374.3506 281.105 370.043 c280.3213 368.3008 278.522 367.3008 277.9419 365.6387 c277.397 364.0771 279.2637 361.8604 277.6196 360.4248 c277.3799 360.2158 276.9595 359.9375 276.9033 359.6973 c276.748 359.0332 276.3267 356.0186 276.0566 355.5293 c275.2036 353.9902 273.3599 353.5967 273.5762 353.1465 c273.9819 352.3027 275.8584 353.9551 277.3472 353.2764 c278.7822 352.6211 278.0947 351.459 276.8877 350.5986 c275.0005 349.2539 273.1289 349.3965 271.1802 348.4736 c270.9824 348.3809 270.5981 347.6289 270.8545 347.1406 c271.8633 345.2188 275.7236 345.6758 277.1157 344.667 c277.6431 344.2842 275.4766 343.6611 275.1865 342.8564 c274.9492 342.1982 275.4409 341.499 275.9014 340.7227 c275.9873 340.5371 lSu285.4546 331.75 m285.2593 332.6406 286.1284 332.8828 286.7959 333.0586 c286.8892 333.083 287.0527 333.1475 287.0854 333.2559 c287.293 333.9434 287.0537 334.6758 287.291 335.3369 c287.5767 336.1357 287.4937 336.9873 287.8711 337.7422 c287.9746 337.9482 288.0879 338.1865 288.3799 338.2002 C288.2974 337.0039 288.0952 335.79 288.3799 334.6006 C289.167 334.1211 289.6851 333.3105 289.8799 332.4258 cSUUu0.3 w273.4141 377.8818 m273.7935 379.0371 L273.0039 379.7637 L274.0493 379.7637 L274.4282 380.8447 L274.8828 379.7637 L275.9839 379.7637 L275.0259 379.0176 L275.4424 377.8623 L274.4282 378.6074 L273.4141 377.8818 LsUuu0.1 w [1 1 0 0 0 0 ]0 d290.1055 401.2578 m291.7734 400.9463 291.6348 400.2803 292.3848 399.6553 cSu301.0098 403.1548 m302.1348 402.2798 302.1055 401.7896 302.0098 400.9053 C302.1826 400.9365 302.5225 400.0244 302.5693 399.9365 cSu258.4492 392.5449 m258.6929 392.5449 l258.8677 392.3457 259.0645 392.5586 259.2046 392.5957 c259.7842 392.7441 261.9028 392.7871 262.1348 392.6543 c263.8848 391.6543 267.2793 390.5195 269.2227 391.8945 c270.4209 392.7402 270.8555 394.6563 270.8735 396.3525 c270.8848 397.4053 270.3442 398.5791 271.0098 399.6553 c271.9224 401.1299 273.7056 400.252 275.4678 400.6133 c275.6113 400.6426 275.3062 401.1855 275.5928 401.4883 c275.9634 401.8813 276.9746 402.4824 277.1172 402.6221 c279.6294 405.0869 277.8701 405.9106 281.418 407.0957 cS302.1982 437.1006 m302.3604 437.0479 302.5029 437.2271 302.6406 437.1606 c303.3926 436.7983 304.0078 436.3003 304.791 435.9741 c305.4316 435.7153 l305.4648 435.4722 305.709 435.1538 306.7422 434.1821 c306.8633 434.0679 307.0313 433.5605 307.1152 433.3691 c307.2715 433.0161 307.7852 432.8315 307.8438 432.4424 c308.0801 430.8677 309.9395 429.8755 311.0098 429.4048 c312.8301 428.6035 313.7598 428.4048 y314.3848 430.9048 317.8262 433.3687 317.0244 434.3345 c316.1289 435.6191 lS313.7598 428.4048 m313.2598 426.6548 312.3545 425.3613 310.8848 424.7798 c310.1084 424.4727 312.5645 423.8721 312.0098 422.6548 c311.4063 421.334 309.8379 420.6499 308.8848 419.4048 c308.5137 418.9194 307.9473 418.7192 307.6289 419.2378 c307.1816 419.9688 306.1992 419.123 306.2441 418.5459 c306.3516 417.1328 305.7598 416.1548 306.0098 415.5298 c306.2051 415.042 306.3613 413.7798 306.1348 413.7798 c304.7598 413.7798 305.3535 413.5151 304.0879 411.0815 c303.7148 410.3638 302.8955 409.3906 301.8604 409.6128 c301.8037 409.6313 lS312.1348 423.2798 m310.6348 424.7798 l309.2871 424.999 308.7842 424.6792 307.4678 424.5298 c305.708 424.3291 303.9863 423.9487 302.6436 425.8882 c301.4551 427.6016 298.9629 426.1001 299.2178 426.1133 c297.8271 426.042 296.7578 427.271 295.5518 426.6133 c295.0928 426.3633 294.5596 426.3691 294.0928 426.4883 c293.8389 426.5527 293.5903 427.1636 293.2764 427.186 c293.0659 427.2012 292.4326 427.3291 291.6626 427.499 c290.1582 427.8306 288.1318 428.3223 287.7183 428.4463 cS285.3848 405.3633 m285.5142 404.1978 285.2705 404.1533 285.6563 403.3667 c285.7402 403.1963 286.1235 401.75 286.27 401.6572 c287.479 400.8877 287.3081 401.2236 288.3477 400.7783 c288.9067 400.5381 289.9873 401.5615 290.4253 401.2578 cS287.6475 383.625 m287.7939 384.1133 288.001 384.6152 287.8418 385.1133 c287.1699 387.2168 286.0313 390.8496 287.2881 392.2305 c287.6045 392.5762 287.187 395.0791 287.1343 395.0303 c287.1377 395.0332 286.8179 396.1494 286.8013 396.5303 c286.77 397.251 286.48 398.958 286.27 400.2197 c286.145 400.9697 286.9023 401.4033 286.9092 401.417 cS301.5928 394.8633 m302.1299 394.291 302.1426 393.6367 301.6592 393.0762 c301.1299 392.4609 301.2949 391.834 301.0723 391.1484 c300.9072 390.6387 300.8057 389.9971 301.0225 389.6152 c301.5928 388.6133 300.9678 387.1133 300.2939 386.5625 c300.124 386.4238 300.1445 386.0137 300.0537 385.7383 c300.0303 385.6641 299.79 385.6113 299.7471 385.4902 c299.5244 384.8652 299.3604 383.0762 299.2178 382.4883 c299.0088 381.6328 298.5264 382.2266 298.2988 381.4277 c298.0996 380.7266 297.4736 380.2803 297.3018 379.5303 C295.1357 380.7568 294.4824 379.373 293.0098 378.7793 c292.5654 378.5996 291.9248 378.5059 291.6348 378.7793 c290.8896 379.4766 289.8291 379.4004 289.208 380.2207 c288.707 380.8828 287.7852 381.6895 288.1729 382.5 c288.6396 383.4746 289.6875 383.9941 290.1309 384.9297 c290.8545 386.459 289.9932 388.8379 291.2656 389.8008 c291.6904 390.1211 292.6338 389.8848 292.9932 390.4824 c293.9385 392.0586 293.9902 393.9121 293.5732 395.7002 C293.3037 395.5361 292.9385 395.5752 292.8857 395.79 c292.5186 397.2842 292.4453 396.9775 292.5098 398.9053 c292.5381 399.749 293.7266 400.6885 294.1348 400.7803 c296.4609 401.3027 297.7598 400.7803 300.4443 402.2485 c301.1084 402.6113 301.0098 403.0298 301.2598 403.6548 c301.3271 403.8242 302.0986 404.394 300.9258 404.4556 c300.8564 404.4595 300.7764 404.77 300.873 404.9072 c301.8936 406.3574 302.4678 408.4883 301.7441 409.6792 c301.4639 410.1392 301.1191 410.6069 300.5928 410.7383 c299.8799 410.9155 297.7568 410.4336 296.8018 410.6968 c296.1865 410.8667 296.3037 411.5674 296.0928 411.7383 c295.8848 411.9063 295.3672 411.9727 294.9678 412.3633 c294.1758 413.1387 293.8643 414.5088 293.4678 414.3633 c291.8843 413.7803 291.1968 411.9829 288.9067 410.0474 c287.7622 409.0796 286.7295 408.4404 286.624 406.7163 c286.6123 406.5117 286.2295 406.5635 286.1699 406.3442 c286.1318 406.2026 285.9033 406.1577 285.9971 405.9751 C285.6318 405.8354 285.5283 405.3174 285.0791 405.2998 cS302.5693 399.9365 m302.6299 399.8174 302.6377 399.6436 302.7402 399.542 c303.1709 399.1143 305.3271 397.9678 305.1338 397.1963 c304.8838 396.1963 304.0303 396.1143 303.9678 396.0303 c303.584 395.5107 302.2393 395.5361 301.9678 395.0303 c301.4756 394.1152 300.5186 395.4639 299.6875 395.1445 c298.3428 394.6309 296.8506 395.2754 295.9053 395.8037 c295.2236 396.1846 294.0732 396.7646 293.4971 395.7744 c293.5146 395.8057 293.5264 395.7002 293.5439 395.6729 cS297.7598 373.9043 m297.9639 374.3906 298.9717 375.7441 298.7275 376.166 c298.2705 376.9551 298.5674 377.6504 298.5928 378.3633 c298.6025 378.627 298.0576 378.9004 298.0928 379.2383 c297.3018 379.5303 lS284.4683 418.9463 m284.5405 417.8755 285.5591 417.5361 285.0513 416.5298 C284.9204 416.625 285.1128 415.8174 284.5513 415.2798 c284.2075 414.9512 284.666 413.8501 284.3848 413.6963 c284.1846 413.5869 284.1606 412.3945 284.0513 412.1963 c283.7427 411.6294 286.3506 411.7271 286.1343 411.1968 c285.2173 408.9473 287.3013 409.0298 288.1079 409.6479 cS284.0513 411.9463 m282.9678 410.1968 l283.0122 410.105 282.626 410.0586 282.3013 409.5298 c281.7979 408.7124 281.2725 407.2983 281.418 407.0957 c281.5981 406.8452 282.6221 406.9683 282.7183 406.6963 c282.8374 406.3608 282.543 404.73 282.3057 404.4126 c281.8486 403.8008 281.6631 403.144 281.2109 402.5737 c281.0264 402.3403 280.875 402.1489 280.7549 401.8804 c279.3604 398.7725 277.144 399.3545 277.2637 395.2461 c277.2861 394.4688 276.1738 393.7441 276.3955 393.0469 c276.7827 391.8262 278.5991 391.1973 278.1113 389.6133 c277.6577 388.1387 279.1558 388.2188 279.8662 387.4004 c279.9639 387.2871 280.0459 386.957 280.1709 386.9004 c280.5244 386.7383 281.4517 386.6787 281.8013 386.5303 c282.7705 386.1211 283.3921 385.2002 284.4678 385.0303 c285.6523 384.8447 286.6128 385.1348 287.3398 384.0195 c287.5664 383.6738 287.8018 383.3086 288.0557 382.9219 c288.1299 382.8086 288.2607 382.5762 288.1494 382.4414 c286.9521 380.9805 283.7598 379.6543 282.2598 377.2793 c281.8613 376.6484 283.6611 376.7734 283.8682 375.9102 c283.9619 375.5156 284.2441 375.1387 284.4111 374.8379 c285.7598 372.4043 288.0098 373.1543 288.6348 374.5293 C289.4678 373.8633 l290.3428 372.9883 289.9443 371.7969 290.9854 371.2852 c290.9951 371.2813 290.9795 371.293 290.9658 371.3047 C291.4814 371.3086 292.1221 371.1387 292.4365 371.4785 c293.7998 372.9492 296.4678 374.2383 297.4678 373.6133 c297.4951 373.5967 298.208 372.8477 298.2178 372.8633 c298.2119 372.8555 295.9736 371.3711 295.9678 371.3633 cS295.9678 371.3633 m295.8857 371.2598 297.2627 370.873 296.8428 370.4883 c296.7178 370.373 295.9199 369.752 295.8428 369.6133 c295.3662 368.7539 295.2256 368.8633 295.2607 367.9102 C295.2607 367.9375 295.2607 367.9609 295.2607 367.9863 c295.2607 367.2324 295.2939 366.416 294.7813 365.8379 c293.8799 364.8164 293.1826 363.7559 292.5596 362.5859 C291.876 363.2578 291.3926 362.7832 291.2598 361.7793 c291.0303 360.0469 289.5498 359.0352 288.4053 357.7461 c288.0947 357.3965 288.1714 357.8438 288.1343 357.3633 C287.5386 357.6113 287.4233 357.8203 287.3013 358.3633 c287.0708 359.3867 286.5537 359.9258 285.417 360.3418 c285.1514 360.4395 284.835 361.0898 284.3848 361.1543 c282.542 361.4219 283.1543 358.9434 282.1348 360.4043 c281.6719 361.0674 280.2832 361.4023 279.6348 361.9043 c279.5103 362 278.5713 362.1543 278.6348 362.2793 c279.6494 364.2764 280.0908 363.7559 278.5825 364.8867 c278.3022 365.0977 277.5259 365.9492 277.2598 366.0293 c276.144 366.3652 275.2666 366.3945 274.1348 366.6543 cS283.8604 376.0859 m280.4326 374.5996 280.8872 373.2041 278.8872 370.8291 c278.4976 370.3662 276.8833 367.0313 276.4492 366.5625 cS269.6099 352.5547 m269.7036 352.5547 l270.1914 352.4961 270.6333 352.6953 271.0977 352.834 c271.2817 352.8867 271.4834 352.7832 271.6899 352.8242 c272.0298 352.8926 272.1094 353.3066 272.3774 353.3613 c273.8989 353.6699 275.4463 353.0645 276.8726 353.7031 c277.1406 353.8223 278.375 354.1133 278.6348 354.0293 c280.2466 353.5176 280.7139 351.5605 282.3916 352.4473 c282.7295 352.627 283.3301 353.6367 283.5654 354.0117 c284.082 354.8379 283.6846 356 282.9932 356.6563 c282.5625 357.0664 282.5918 357.9961 282.2598 358.5293 c282.0137 358.9258 283.1035 357.2246 282.7598 357.5293 c282.2168 358.0117 282.5098 359.1543 282.6348 359.9043 cS288.1343 357.3633 m288.1533 356.0801 l288.0322 355.8027 287.9229 355.5176 287.7471 355.2793 c286.7207 353.8984 285.6973 352.1094 286.6768 350.377 c287.2471 349.3672 288.1943 348.5664 288.7236 347.4004 c288.7559 347.3301 288.876 347.166 288.8955 347.1035 c289.0029 346.7441 288.042 344.4395 287.9678 343.3633 c287.9385 342.9219 288.1553 342.0117 287.6318 341.8203 c287.5449 341.7871 287.4111 341.7051 287.3955 341.6777 c287.1523 341.2832 286.9639 340.834 286.542 340.5625 c285.8857 340.1406 285.6816 340.6797 285.0098 340.4043 c283.7383 339.8867 284.0732 337.623 283.374 336.584 cS291.1348 360.7793 m293.5098 359.2793 291.6821 358.4941 293.3013 356.8633 c293.5464 356.6172 294.4502 355.7383 294.7949 355.6992 c295.6084 355.6113 296.9209 356.0244 297.6338 355.6963 c298.4814 355.3076 299.458 356.3311 300.3018 356.0303 cS301.1992 442.8521 m301.2178 442.7959 l301.6455 441.7354 301.3604 440.4995 300.8643 439.4507 c300.4863 438.6538 301.0664 437.1992 302.1934 437.2461 C302.0879 436.3779 302.4248 435.5586 302.251 434.7148 c301.958 433.2905 302.4932 432.9097 301.2598 431.4048 c300.8828 430.9448 300.3037 430.4785 299.6201 430.2759 c298.6826 429.998 297.7275 430.3384 296.9844 430.0776 c295.3232 429.4961 294.3848 429.2798 292.3848 429.2798 c291.0313 429.2798 285.6138 428.9258 285.0513 427.3633 c284.8506 426.8052 287.3638 426.3633 287.0513 425.3633 c281.8223 425.7173 l279.9473 424.7173 280.9077 421.3311 281.2183 420.4463 c281.5566 419.4829 282.1416 418.751 282.5928 418.6133 c283.5845 418.3101 284.4683 418.9463 284.5928 418.2383 cS280.7568 424.5107 m279.4692 424.8247 279.623 425.2593 279.3223 425.4048 c277.7197 426.1807 277.8989 425.9727 277.4473 426.4048 c276.9214 426.9077 277.8726 427.4604 276.2598 428.3423 c275.0835 428.9854 275.1182 427.3594 274.2847 427.5469 C273.5557 427.5469 274.6973 429.7173 272.6348 429.9048 cS302.6162 399.874 m303.6484 399.6709 308.6348 398.8633 309.3008 398.8633 c309.9883 398.8633 323.375 400.5908 325.8848 400.7803 cS304.3018 396.5303 m305.335 396.2979 305.6777 395.9912 306.3867 395.4639 c306.8828 395.0938 307.248 394.8457 307.5137 394.6836 c308.1387 392.5059 l308.3223 392.0977 308.5684 391.6211 308.957 391.4648 c309.5605 391.2207 310.3223 391.2461 310.8828 390.8809 c310.9473 390.8379 310.9648 390.7832 311 390.7363 c311.043 390.6777 311.041 390.5977 311.0703 390.5371 c311.1309 390.4102 311.2383 390.3086 311.3086 390.1875 c311.4004 390.0273 311.416 389.8184 311.5488 389.6543 c311.6055 389.5859 311.541 389.4336 311.5977 389.3398 c311.7168 389.1426 311.7773 388.9395 311.8867 388.7422 c312.0938 388.373 312.1523 387.9258 312.4414 387.5859 c312.4941 387.5215 312.6055 387.4375 312.6543 387.3262 cS324.291 417.6021 m324.9258 417.0098 327.6924 418.1152 328.3428 417.4883 c328.5322 417.3062 329.8857 416.1348 330.0928 415.9883 c331.3193 415.1191 331.9756 413.9697 333.2178 413.4883 c332.9678 412.2383 lS357.2402 408.7017 m356.623 408.2021 355.9707 408.5195 355.5918 408.9229 c352.2031 412.5327 355.1484 409.8901 349.7461 410.8262 c349.5391 410.8618 349.3906 411.0469 349.2051 411.1567 c348.5723 411.5288 347.8398 411.1675 347.2012 411.4253 c346.8027 411.5859 346.4063 411.9707 346.0176 411.7334 c345.5859 411.4683 345.6758 410.9038 345.6914 410.4263 c345.4766 409.9736 lS319.6387 419.2979 m319.1445 419.5488 318.7852 419.0684 318.373 418.6572 c318.2832 418.5679 317.9531 418.7881 317.793 418.8394 c317.5098 418.9282 317.3945 419.4482 317.1387 419.3501 c315.5645 418.7461 314.2754 418.2485 312.6719 419.0854 C312.7383 419.061 L312.5117 419.1465 312.332 419.2964 312.1641 419.4629 c312.0449 419.5806 311.9355 419.73 311.8906 419.8604 c311.7109 420.3843 311.7002 421.228 311.3945 421.7788 CS325.8848 400.7803 m327.084 400.3486 328.0879 399.874 328.6348 399.8633 c329.5127 399.8447 330.7461 400.333 330.9678 400.3633 c332.0283 400.5068 333.1191 401.6123 333.8906 400.9385 c338.543 396.8818 338.5859 398.4209 342.2383 398.3662 c343.252 398.3506 344.9434 396.9893 345.9902 396.5518 c346.0703 396.5186 346.0156 396.4775 345.9902 396.4775 C346.9609 396.458 347.8203 395.8662 348.6172 395.4092 c349.5449 394.875 350.0938 393.9277 351.0449 393.5449 c352.4609 392.9121 lS319.7217 418.8115 m319.7295 418.5649 319.7891 418.0859 319.9648 417.9224 c320.8594 417.0835 321.4434 418.3335 321.793 419.1147 c321.8516 419.2451 322.0645 419.2314 322.2129 419.1904 c322.4648 419.1211 322.4648 418.7861 322.6738 418.6963 c323.3047 418.4268 323.8184 418.0405 324.291 417.6021 cSUU282.4434 335.5762 m282.4482 335.5684 282.4541 335.5625 282.46 335.5566 c282.6826 335.7051 l282.9043 335.9063 283.1475 336.2578 283.3564 336.5664 cSU[0.9 0.9 0 0 0 0 ]0 d322.5508 418.9468 m322.3057 417.6196 322.5488 418.2246 322.4746 417.4937 c322.3848 416.6133 324.0518 416.1138 323.6348 414.6968 c323.3633 413.7769 322.8418 413.3813 322.5146 412.6323 c322.1865 411.8828 321.6348 411.3633 320.4678 411.3633 c319.7451 411.3633 317.2178 413.3633 316.8008 412.6968 c316.5322 412.2671 316.1221 411.2534 316.3008 411.0298 c316.9668 410.1963 317.9678 410.0371 317.9678 409.0298 c317.9678 408.2798 317.2334 407.4146 317.3008 407.3633 c317.3467 407.3286 316.1807 405.2896 315.8008 404.1968 c315.6387 403.729 316.1318 403.541 316.3008 403.5298 c317.5508 403.4463 319.6064 404.8765 320.4678 405.3633 c322.3848 406.4468 323.3848 407.9468 323.8428 407.3633 c324.6064 406.3901 322.5645 405.6694 322.9678 404.8633 c323.1797 404.4395 323.7373 403.8271 324.083 403.6982 c324.625 403.4966 324.9561 403.5894 325.4678 403.6133 c325.9805 403.6377 326.9688 403.1968 326.1348 402.1968 c325.4893 401.4229 325.6045 400.8916 325.6348 400.8633 cSUu0.3 w []0 d298.854 419.5898 m299.2329 420.7461 L298.4438 421.4722 L299.4888 421.4722 L299.8677 422.5532 L300.3228 421.4722 L301.4243 421.4722 L300.4653 420.7271 L300.8823 419.5708 L299.8677 420.3154 L298.854 419.5898 LsUU1 Ap1 w358.6064 332.167 m254.3931 332.167 L254.3931 448.5005 L358.6064 448.5005 L358.6064 332.167 LnLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_pattern_AI5 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF%%EndDocument~%AI5_EndPlace/BBAccumRotation (0.000000) XTLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF